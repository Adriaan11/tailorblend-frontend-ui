@page "/multi-agent-blend"
@using BlazorConsultant.Services
@using BlazorConsultant.Models
@using System.Text.Json
@inject IMultiAgentService MultiAgentService
@inject ISessionService SessionService

<PageTitle>Multi-Agent Formulation | TailorBlend</PageTitle>

<div class="tb-page">
    <div class="tb-container">
        <div class="tb-page__header">
            <div class="tb-page__title-block">
                <div class="tb-page__identity">
                    <div class="tb-icon-container tb-icon-container--accent">
                        <MudIcon Icon="@Icons.Material.Filled.AutoAwesome" Style="color: var(--tb-accent); font-size: 1.5rem;" />
                    </div>
                    <div class="tb-stack tb-stack--sm">
                        <div class="tb-badge" style="background: rgba(245, 158, 11, 0.1); color: #f59e0b;">
                            <MudIcon Icon="@Icons.Material.Filled.Science" Size="Size.Small" />
                            Experimental
                        </div>
                        <h1 class="tb-page__title">Multi-Agent Formulation</h1>
                    </div>
                </div>
                <p class="tb-page__subtitle">
                    Powered by specialized AI agents working together to create your perfect blend.
                </p>
                <div class="tb-scroll-row" aria-label="Highlights of the multi-agent workflow">
                    <span class="tb-chip">
                        <MudIcon Icon="@Icons.Material.Filled.Psychology" Size="Size.Small" />
                        Intelligent Analysis
                    </span>
                    <span class="tb-chip">
                        <MudIcon Icon="@Icons.Material.Filled.Science" Size="Size.Small" />
                        Evidence-Based
                    </span>
                    <span class="tb-chip">
                        <MudIcon Icon="@Icons.Material.Filled.VerifiedUser" Size="Size.Small" />
                        Safety Checked
                    </span>
                </div>
            </div>
        </div>

        <div class="tb-page__content">
        @if (!isGenerating && string.IsNullOrEmpty(errorMessage))
        {
            <!-- Input Form -->
            <section class="tb-section">
                <div class="tb-card">
                    <div class="tb-card__header">
                        <h2 class="tb-section__title">Patient profile</h2>
                        <p class="tb-section__subtitle">
                            Enter health information to generate a personalized blend.
                        </p>
                    </div>

                    <div class="tb-card__content">
                        <div class="tb-form-grid">
                        <!-- Basic Info -->
                        <div class="tb-form-col-6">
                            <div class="tb-form-group">
                                <label class="tb-form-label">Patient Name</label>
                                <input type="text"
                                       class="tb-form-input"
                                       @bind="request.PatientName"
                                       placeholder="Enter patient name" />
                            </div>
                        </div>

                        <div class="tb-form-col-3">
                            <div class="tb-form-group">
                                <label class="tb-form-label">Age</label>
                                <input type="number"
                                       class="tb-form-input"
                                       @bind="request.Age"
                                       min="1"
                                       max="120"
                                       placeholder="Age" />
                            </div>
                        </div>

                        <div class="tb-form-col-3">
                            <div class="tb-form-group">
                                <label class="tb-form-label">Sex</label>
                                <select class="tb-form-select" @bind="request.Sex">
                                    <option value="">Select...</option>
                                    <option value="Male">Male</option>
                                    <option value="Female">Female</option>
                                </select>
                            </div>
                        </div>

                        <!-- Weight -->
                        <div class="tb-form-col-4">
                            <div class="tb-form-group">
                                <label class="tb-form-label">Weight (kg)</label>
                                <input type="number"
                                       class="tb-form-input"
                                       @bind="request.Weight"
                                       min="1"
                                       max="300"
                                       step="0.1"
                                       placeholder="Weight" />
                            </div>
                        </div>

                        <!-- Dietary Preferences -->
                        <div class="tb-form-col-4">
                            <div class="tb-form-group">
                                <label class="tb-form-label">Dietary Preferences</label>
                                <input type="text"
                                       class="tb-form-input"
                                       @bind="request.DietaryPreferences"
                                       placeholder="e.g., vegan, vegetarian, keto..." />
                            </div>
                        </div>

                        <!-- Medical Conditions -->
                        <div class="tb-form-col-4">
                            <div class="tb-form-group">
                                <label class="tb-form-label">Medical Conditions</label>
                                <input type="text"
                                       class="tb-form-input"
                                       @bind="request.MedicalConditions"
                                       placeholder="e.g., diabetes, hypertension..." />
                            </div>
                        </div>

                        <!-- Health Goals (Required) - Full Width -->
                        <div class="tb-form-col-12">
                            <div class="tb-form-group">
                                <label class="tb-form-label">Health Goals *</label>
                                <textarea class="tb-form-textarea"
                                          @bind="request.HealthGoals"
                                          placeholder="e.g., Better sleep, more energy, reduce stress, improve focus..."
                                          rows="3"></textarea>
                                <div class="tb-form-helper">Describe your health goals - the more detail, the better!</div>
                            </div>
                        </div>

                        <!-- Medications -->
                        <div class="tb-form-col-6">
                            <div class="tb-form-group">
                                <label class="tb-form-label">Current Medications</label>
                                <textarea class="tb-form-textarea"
                                          @bind="request.Medications"
                                          placeholder="e.g., Metformin 500mg, Aspirin 75mg..."
                                          rows="2"></textarea>
                            </div>
                        </div>

                        <!-- Additional Info -->
                        <div class="tb-form-col-6">
                            <div class="tb-form-group">
                                <label class="tb-form-label">Additional Information</label>
                                <textarea class="tb-form-textarea"
                                          @bind="request.AdditionalInfo"
                                          placeholder="Allergies, lifestyle, exercise habits..."
                                          rows="2"></textarea>
                            </div>
                        </div>
                        </div>
                    </div>

                    <div class="tb-card__actions">
                        <button type="button"
                                class="tb-button tb-button--primary"
                                @onclick="GenerateBlend"
                                disabled="@(string.IsNullOrWhiteSpace(request.HealthGoals))">
                            <MudIcon Icon="@Icons.Material.Filled.AutoAwesome" />
                            <span>Generate Multi-Agent Formulation</span>
                        </button>
                    </div>
                </div>
            </section>
        }

        @if (isGenerating)
        {
            <!-- Agent Progress Display -->
            <section class="tb-section">
                <div class="tb-card">
                    <div class="tb-card__header">
                        <h2 class="tb-section__title">Agent workflow</h2>
                        <p class="tb-section__subtitle">
                            Watching specialized agents collaborate in real time.
                        </p>
                    </div>

                    <div class="tb-card__content">
                        @foreach (var step in agentSteps)
                        {
                            <div class="agent-step @GetStepClass(step.StepType)">
                                @if (step.StepType == "thinking")
                                {
                                    <div class="tb-icon-container tb-icon-container--sm tb-icon-container--info">
                                        <MudProgressCircular Size="Size.Small" Indeterminate="true" Color="Color.Primary" />
                                    </div>
                                }
                                else if (step.StepType == "result")
                                {
                                    <div class="tb-icon-container tb-icon-container--sm tb-icon-container--accent">
                                        <MudIcon Icon="@Icons.Material.Filled.CheckCircle" Color="Color.Success" />
                                    </div>
                                }
                                else if (step.StepType == "error")
                                {
                                    <div class="tb-icon-container tb-icon-container--sm tb-icon-container--warning">
                                        <MudIcon Icon="@Icons.Material.Filled.Error" Color="Color.Warning" />
                                    </div>
                                }

                                <div class="agent-step__body">
                                    <p class="agent-step__title">@step.AgentName</p>
                                    <p class="agent-step__text">@step.Content</p>
                                </div>
                            </div>
                        }
                    </div>
                </div>
            </section>
        }

        @if (!string.IsNullOrEmpty(finalResult) && !isGenerating)
        {
            <!-- Final Results -->
            <section class="tb-section">
                <div class="tb-card">
                    <div class="tb-card__header">
                        <h2 class="tb-section__title">Formulation complete</h2>
                        <p class="tb-section__subtitle">Your personalized blend has been created.</p>
                    </div>

                    <div class="tb-card__content">
                        <div class="tb-result-panel">
                            @((MarkupString)finalResult)
                        </div>
                    </div>

                    <div class="tb-card__actions">
                        <button type="button"
                                class="tb-button tb-button--secondary"
                                @onclick="Reset">
                            <MudIcon Icon="@Icons.Material.Filled.Refresh" />
                            <span>Create Another Blend</span>
                        </button>
                    </div>
                </div>
            </section>
        }

        @if (!string.IsNullOrEmpty(errorMessage))
        {
            <!-- Error Display -->
            <section class="tb-section">
                <div class="tb-card tb-card--flat tb-error-card">
                    <div class="tb-card__content">
                        <h3 class="tb-section__title">Something went wrong</h3>
                        <p class="tb-copy">@errorMessage</p>
                    </div>
                    <div class="tb-card__actions">
                        <button type="button"
                                class="tb-button tb-button--secondary"
                                @onclick="Reset">
                            <span>Try Again</span>
                        </button>
                    </div>
                </div>
            </section>
        }
        </div>
    </div>
</div>

@code {
    private MultiAgentRequest request = new()
    {
        SessionId = Guid.NewGuid().ToString()
    };

    private List<AgentStepResponse> agentSteps = new();
    private bool isGenerating = false;
    private string finalResult = string.Empty;
    private string errorMessage = string.Empty;

    protected override void OnInitialized()
    {
        // Set session ID from session service
        request.SessionId = SessionService.SessionId;
    }

    private async Task GenerateBlend()
    {
        if (string.IsNullOrWhiteSpace(request.HealthGoals))
        {
            errorMessage = "Health goals are required.";
            return;
        }

        isGenerating = true;
        errorMessage = string.Empty;
        finalResult = string.Empty;
        agentSteps.Clear();

        try
        {
            await foreach (var step in MultiAgentService.StreamFormulationAsync(request))
            {
                agentSteps.Add(step);
                StateHasChanged();

                // Check if this is the final result
                if (step.AgentName == "Multi-Agent System" && step.StepType == "result")
                {
                    // Format the final result for display
                    if (step.Data != null)
                    {
                        finalResult = FormatFinalResult(step.Data);
                    }
                }
                else if (step.StepType == "error")
                {
                    errorMessage = step.Content;
                    isGenerating = false;
                    StateHasChanged();
                    return;
                }
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"An error occurred: {ex.Message}";
        }
        finally
        {
            isGenerating = false;
            StateHasChanged();
        }
    }

    private string FormatFinalResult(Dictionary<string, object> data)
    {
        // Pretty-print the JSON result
        var options = new JsonSerializerOptions
        {
            WriteIndented = true
        };
        return JsonSerializer.Serialize(data, options);
    }

    private string GetStepClass(string stepType)
    {
        return stepType.ToLower();
    }

    private void Reset()
    {
        request = new MultiAgentRequest
        {
            SessionId = SessionService.SessionId
        };
        agentSteps.Clear();
        finalResult = string.Empty;
        errorMessage = string.Empty;
        isGenerating = false;
    }
}
