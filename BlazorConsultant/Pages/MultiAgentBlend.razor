@page "/multi-agent-blend"
@using BlazorConsultant.Services
@using BlazorConsultant.Models
@using System.Text.Json
@inject IMultiAgentService MultiAgentService
@inject ISessionService SessionService

<PageTitle>Multi-Agent Formulation | TailorBlend</PageTitle>

<!-- Multi-Agent Hero -->
<section class="tb-multi-hero">
    <div class="tb-container">
        <div class="tb-multi-hero__grid">
            <div class="tb-multi-hero__content">
                <p class="tb-eyebrow">Multi-agent orchestration</p>
                <h1>Let specialist agents co-create your formulation.</h1>
                <p class="tb-multi-hero__subtitle">
                    Feed the system precise context and watch parallel experts evaluate data, safety, and sourcing in real time.
                </p>

                <div class="tb-multi-meta">
                    <span class="tb-meta-chip">
                        <TbIcon Icon="brain" Size="sm" />
                        Multi-phase reasoning
                    </span>
                    <span class="tb-meta-chip">
                        <TbIcon Icon="shield-check" Size="sm" />
                        Guardrail aware
                    </span>
                    <span class="tb-meta-chip">
                        <TbIcon Icon="flask" Size="sm" />
                        Formulation ready
                    </span>
                </div>
            </div>

            <div class="tb-multi-hero__card">
                <div class="tb-multi-hero__card-head">
                    <p class="tb-text-caption">Session status</p>
                    <span class="tb-session-pill">@SessionLabel</span>
                </div>
                <ul class="tb-multi-hero__pipelines">
                    <li>
                        <TbIcon Icon="diagram-project" Size="sm" />
                        Pipeline: Intake → Analysis → Formulation
                    </li>
                    <li>
                        <TbIcon Icon="lock" Size="sm" />
                        Safety layer monitors contraindications
                    </li>
                    <li>
                        <TbIcon Icon="chart-line" Size="sm" />
                        Output includes dosage + sourcing context
                    </li>
                </ul>
                <div class="tb-multi-hero__note">
                    <TbIcon Icon="sparkles" Size="sm" />
                    <span>Detailed goals and current stack fuel better cross-agent decisions.</span>
                </div>
            </div>
        </div>
    </div>
</section>

<!-- Multi-Agent Workspace -->
<section class="tb-multi-workspace">
    <div class="tb-container">
        <div class="tb-multi-layout">
            <div class="tb-multi-main">
                @if (!isGenerating && string.IsNullOrEmpty(errorMessage) && string.IsNullOrEmpty(finalResult))
                {
                    <div class="tb-multi-card">
                        <div class="tb-multi-card__header">
                            <p class="tb-eyebrow">Patient profile</p>
                            <h3>Share the essentials</h3>
                            <p>Structured inputs help each agent reason quickly and safely.</p>
                        </div>

                        <div class="tb-form-grid">
                            <div class="tb-form-col-6">
                                <div class="tb-form-group">
                                    <label class="tb-form-label">Patient Name</label>
                                    <input type="text"
                                           class="tb-form-input"
                                           @bind="request.PatientName"
                                           placeholder="Enter patient name" />
                                </div>
                            </div>

                            <div class="tb-form-col-3">
                                <div class="tb-form-group">
                                    <label class="tb-form-label">Age</label>
                                    <input type="number"
                                           class="tb-form-input"
                                           @bind="request.Age"
                                           min="1"
                                           max="120"
                                           placeholder="Age" />
                                </div>
                            </div>

                            <div class="tb-form-col-3">
                                <div class="tb-form-group">
                                    <label class="tb-form-label">Sex</label>
                                    <select class="tb-form-select" @bind="request.Sex">
                                        <option value="">Select...</option>
                                        <option value="Male">Male</option>
                                        <option value="Female">Female</option>
                                    </select>
                                </div>
                            </div>

                            <div class="tb-form-col-4">
                                <div class="tb-form-group">
                                    <label class="tb-form-label">Weight (kg)</label>
                                    <input type="number"
                                           class="tb-form-input"
                                           @bind="request.Weight"
                                           min="1"
                                           max="300"
                                           step="0.1"
                                           placeholder="Weight" />
                                </div>
                            </div>

                            <div class="tb-form-col-4">
                                <div class="tb-form-group">
                                    <label class="tb-form-label">Dietary Preferences</label>
                                    <input type="text"
                                           class="tb-form-input"
                                           @bind="request.DietaryPreferences"
                                           placeholder="e.g., vegan, vegetarian, keto..." />
                                </div>
                            </div>

                            <div class="tb-form-col-4">
                                <div class="tb-form-group">
                                    <label class="tb-form-label">Medical Conditions</label>
                                    <input type="text"
                                           class="tb-form-input"
                                           @bind="request.MedicalConditions"
                                           placeholder="e.g., diabetes, hypertension..." />
                                </div>
                            </div>

                            <div class="tb-form-col-12">
                                <div class="tb-form-group">
                                    <label class="tb-form-label">Health Goals *</label>
                                    <textarea class="tb-form-textarea"
                                              @bind="request.HealthGoals"
                                              placeholder="e.g., Better sleep, more energy, reduce stress, improve focus..."
                                              rows="3"></textarea>
                                    <div class="tb-form-helper">Describe objectives—agents align to your priorities.</div>
                                </div>
                            </div>

                            <div class="tb-form-col-6">
                                <div class="tb-form-group">
                                    <label class="tb-form-label">Current Medications</label>
                                    <textarea class="tb-form-textarea"
                                              @bind="request.Medications"
                                              placeholder="e.g., Metformin 500mg, Aspirin 75mg..."
                                              rows="2"></textarea>
                                </div>
                            </div>

                            <div class="tb-form-col-6">
                                <div class="tb-form-group">
                                    <label class="tb-form-label">Additional Information</label>
                                    <textarea class="tb-form-textarea"
                                              @bind="request.AdditionalInfo"
                                              placeholder="Allergies, lifestyle, exercise habits..."
                                              rows="2"></textarea>
                                </div>
                            </div>
                        </div>

                        <div class="tb-multi-card__actions">
                            <TbButton Variant="filled" Color="primary" @onclick="GenerateBlend" Disabled="@(string.IsNullOrWhiteSpace(request.HealthGoals))">
                                <TbIcon Icon="wand-magic-sparkles" Size="md" />
                                <span>Generate Multi-Agent Formulation</span>
                            </TbButton>
                        </div>
                    </div>
                }

                @if (isGenerating)
                {
                    <div class="tb-multi-card tb-multi-card--status">
                        <div class="tb-multi-card__header">
                            <p class="tb-eyebrow">Running agents</p>
                            <h3>Blend in progress</h3>
                            <p>Streaming intermediate results from each specialized agent.</p>
                        </div>
                        <div class="tb-multi-status">
                            <TbLoadingSpinner Size="lg" Variant="circular" />
                            <p>Hang tight—analysis, safety, and synthesis agents are collaborating.</p>
                        </div>
                    </div>
                }

                @if (!string.IsNullOrEmpty(finalResult))
                {
                    <div class="tb-multi-card">
                        <div class="tb-multi-card__header">
                            <p class="tb-eyebrow">Formulation complete</p>
                            <h3>Personalized protocol</h3>
                            <p>Includes structured data for dosage, sourcing, and rationale.</p>
                        </div>
                        <div class="tb-multi-result">@((MarkupString)finalResult)</div>
                        <div class="tb-multi-card__actions tb-multi-card__actions--end">
                            <TbButton Variant="filled" Color="secondary" StartIcon="rotate-right" @onclick="Reset">
                                <span>Create another blend</span>
                            </TbButton>
                        </div>
                    </div>
                }

                @if (!string.IsNullOrEmpty(errorMessage))
                {
                    <div class="tb-multi-card tb-multi-card--error">
                        <div class="tb-multi-card__header">
                            <p class="tb-eyebrow">Agent error</p>
                            <h3>We couldn't finish that run</h3>
                            <p>@errorMessage</p>
                        </div>
                        <div class="tb-multi-card__actions">
                            <TbButton Variant="filled" Color="secondary" @onclick="Reset">
                                <span>Try again</span>
                            </TbButton>
                        </div>
                    </div>
                }
            </div>

            <aside class="tb-multi-aside">
                <div class="tb-multi-agents">
                    <div class="tb-multi-agents__header">
                        <div>
                            <p class="tb-eyebrow">Agent workflow</p>
                            <h3>Live pipeline</h3>
                        </div>
                        <div class="tb-multi-agents__status">
                            @if (isGenerating)
                            {
                                <TbLoadingSpinner Size="sm" Variant="circular" />
                                <span>Running</span>
                            }
                            else if (agentSteps.Count > 0)
                            {
                                <TbIcon Icon="check-circle" Size="sm" Color="success" />
                                <span>Last run saved</span>
                            }
                            else
                            {
                                <TbIcon Icon="pause" Size="sm" />
                                <span>Idle</span>
                            }
                        </div>
                    </div>

                    <div class="tb-multi-agents__list">
                        @if (agentSteps.Count == 0)
                        {
                            <div class="tb-multi-empty">
                                <TbIcon Icon="diagram-project" Size="lg" />
                                <p>No agent activity yet. Submit the form to kick things off.</p>
                            </div>
                        }
                        else
                        {
                            @foreach (var step in agentSteps)
                            {
                                <div class="tb-agent-step @GetStepClass(step.StepType)">
                                    <div class="tb-agent-step__icon">
                                        @if (step.StepType == "thinking")
                                        {
                                            <TbLoadingSpinner Size="sm" Variant="circular" />
                                        }
                                        else if (step.StepType == "result")
                                        {
                                            <TbIcon Icon="check-circle" Size="sm" Color="success" />
                                        }
                                        else if (step.StepType == "error")
                                        {
                                            <TbIcon Icon="triangle-exclamation" Size="sm" Color="warning" />
                                        }
                                    </div>
                                    <div>
                                        <p class="tb-agent-step__title">@step.AgentName</p>
                                        <p class="tb-agent-step__text">@step.Content</p>
                                    </div>
                                </div>
                            }
                        }
                    </div>
                </div>

                <div class="tb-multi-aside-card">
                    <p class="tb-eyebrow">How it works</p>
                    <h4>Specialized agent roles</h4>
                    <ul>
                        <li>Intake agent structures your context.</li>
                        <li>Safety agent cross-checks medications and constraints.</li>
                        <li>Formulation agent balances efficacy, dosing, and sourcing.</li>
                    </ul>
                </div>
            </aside>
        </div>
    </div>
</section>

@code {
    private MultiAgentRequest request = new()
    {
        SessionId = Guid.NewGuid().ToString()
    };

    private List<AgentStepResponse> agentSteps = new();
    private bool isGenerating = false;
    private string finalResult = string.Empty;
    private string errorMessage = string.Empty;
    private string SessionLabel => BuildSessionLabel();

    protected override void OnInitialized()
    {
        // Set session ID from session service
        request.SessionId = SessionService.SessionId;
    }

    private async Task GenerateBlend()
    {
        if (string.IsNullOrWhiteSpace(request.HealthGoals))
        {
            errorMessage = "Health goals are required.";
            return;
        }

        isGenerating = true;
        errorMessage = string.Empty;
        finalResult = string.Empty;
        agentSteps.Clear();

        try
        {
            await foreach (var step in MultiAgentService.StreamFormulationAsync(request))
            {
                agentSteps.Add(step);
                StateHasChanged();

                // Check if this is the final result
                if (step.AgentName == "Multi-Agent System" && step.StepType == "result")
                {
                    // Format the final result for display
                    if (step.Data != null)
                    {
                        finalResult = FormatFinalResult(step.Data);
                    }
                }
                else if (step.StepType == "error")
                {
                    errorMessage = step.Content;
                    isGenerating = false;
                    StateHasChanged();
                    return;
                }
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"An error occurred: {ex.Message}";
        }
        finally
        {
            isGenerating = false;
            StateHasChanged();
        }
    }

    private string FormatFinalResult(Dictionary<string, object> data)
    {
        // Pretty-print the JSON result
        var options = new JsonSerializerOptions
        {
            WriteIndented = true
        };
        return JsonSerializer.Serialize(data, options);
    }

    private string GetStepClass(string stepType)
    {
        return stepType.ToLower();
    }

    private string BuildSessionLabel()
    {
        var sessionId = SessionService?.SessionId;
        if (string.IsNullOrEmpty(sessionId))
        {
            return "Session pending";
        }

        var tailLength = Math.Min(6, sessionId.Length);
        var suffix = sessionId.Substring(sessionId.Length - tailLength, tailLength).ToUpperInvariant();
        return $"Session #{suffix}";
    }

    private void Reset()
    {
        request = new MultiAgentRequest
        {
            SessionId = SessionService.SessionId
        };
        agentSteps.Clear();
        finalResult = string.Empty;
        errorMessage = string.Empty;
        isGenerating = false;
    }
}
