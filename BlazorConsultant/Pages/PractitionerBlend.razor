@page "/practitioner-blend"
@using BlazorConsultant.Models
@using BlazorConsultant.Services
@using BlazorConsultant.Components
@using Microsoft.AspNetCore.Components.Forms
@inject IChatService ChatService
@inject IChatStateService ChatStateService
@inject ISessionService SessionService
@inject IJSRuntime JS

<PageTitle>Practitioner Blend Creator - TailorBlend AI</PageTitle>

<!-- Practitioner Hero -->
<section class="tb-practitioner-hero">
    <div class="tb-container">
        <div class="tb-practitioner-hero__grid">
            <div class="tb-practitioner-hero__content">
                <p class="tb-eyebrow">Practitioner workspace</p>
                <h1>Design evidence-backed blends with clinical guardrails.</h1>
                <p class="tb-practitioner-hero__subtitle">
                    Capture the exact patient context, layer automated interaction checks, and ship transparent formulations in minutes.
                </p>

                <div class="tb-practitioner-meta">
                    <span class="tb-meta-chip">
                        <TbIcon Icon="dna" Size="sm" />
                        Clinical-grade intake
                    </span>
                    <span class="tb-meta-chip">
                        <TbIcon Icon="shield-heart" Size="sm" />
                        Safety guardrails
                    </span>
                    <span class="tb-meta-chip">
                        <TbIcon Icon="book" Size="sm" />
                        Research-backed outputs
                    </span>
                </div>
            </div>

            <div class="tb-practitioner-hero__card">
                <div class="tb-practitioner-hero__card-head">
                    <p class="tb-text-caption">Session readiness</p>
                    <span class="tb-session-pill">@SessionLabel</span>
                </div>
                <div class="tb-practitioner-hero__metrics">
                    <div>
                        <p class="tb-practitioner-hero__metric-label">Interaction screen</p>
                        <p class="tb-practitioner-hero__metric-value">Auto</p>
                    </div>
                    <div>
                        <p class="tb-practitioner-hero__metric-label">Research depth</p>
                        <p class="tb-practitioner-hero__metric-value">Evidence+</p>
                    </div>
                    <div>
                        <p class="tb-practitioner-hero__metric-label">Blend formats</p>
                        <p class="tb-practitioner-hero__metric-value">Caps + Powders</p>
                    </div>
                </div>
                <div class="tb-practitioner-hero__note">
                    <TbIcon Icon="sparkles" Size="sm" />
                    <span>Upload labs or DNA reports to enrich the formulation context.</span>
                </div>
            </div>
        </div>
    </div>
</section>

<!-- Practitioner Workspace -->
<section class="tb-practitioner-workspace">
    <div class="tb-container">
        <div class="tb-practitioner-layout">
            <div class="tb-practitioner-main" id="blendMessagesContainer" @ref="_messagesContainer">
                <header class="tb-practitioner-heading">
                    <div class="tb-practitioner-heading__title">
                        <div class="tb-practitioner-heading__icon">
                            <TbIcon Icon="flask" Size="lg" />
                        </div>
                        <div>
                            <p class="tb-badge tb-badge--subtle">
                                <TbIcon Icon="shield-heart" Size="sm" />
                                Practitioner Mode
                            </p>
                            <h2>Evidence-based supplement formulation</h2>
                            <p>Create personalized protocols with dosage guidance, interaction checks, and sourcing prompts.</p>
                        </div>
                    </div>
                    <div class="tb-practitioner-heading__actions">
                        @if (blendGenerated)
                        {
                            <TbButton Variant="outlined" Color="primary" StartIcon="plus" Size="sm" @onclick="ResetForm">
                                New patient
                            </TbButton>
                        }
                    </div>
                </header>

                @if (!blendGenerated)
                {
                    <div class="tb-practitioner-panel">
                        <div class="tb-practitioner-panel__header">
                            <div>
                                <p class="tb-eyebrow">Patient intake</p>
                                <h3>Capture the essentials</h3>
                            </div>
                            <p>Structured inputs help TailorBlend deliver safe, specific recommendations.</p>
                        </div>

                        <div class="tb-form-grid">
                            <div class="tb-form-col-6">
                                <div class="tb-form-group">
                                    <label class="tb-form-label">Patient Name *</label>
                                    <input type="text"
                                           class="tb-form-input"
                                           @bind="request.PatientName"
                                           placeholder="Enter patient name" />
                                </div>
                            </div>
                            <div class="tb-form-col-6">
                                <div class="tb-form-group">
                                    <label class="tb-form-label">Your Email (Practitioner) *</label>
                                    <input type="email"
                                           class="tb-form-input"
                                           @bind="request.PractitionerEmail"
                                           placeholder="practitioner@example.com" />
                                </div>
                            </div>

                            <div class="tb-form-col-4">
                                <div class="tb-form-group">
                                    <label class="tb-form-label">Age (years) *</label>
                                    <input type="number"
                                           class="tb-form-input"
                                           @bind="request.Age"
                                           min="1"
                                           max="120"
                                           placeholder="Age" />
                                </div>
                            </div>
                            <div class="tb-form-col-4">
                                <div class="tb-form-group">
                                    <label class="tb-form-label">Sex *</label>
                                    <select class="tb-form-select" @bind="request.Sex">
                                        <option value="">Select...</option>
                                        <option value="Male">Male</option>
                                        <option value="Female">Female</option>
                                        <option value="Other">Other / Prefer not to say</option>
                                    </select>
                                </div>
                            </div>
                            <div class="tb-form-col-4">
                                <div class="tb-form-group">
                                    <label class="tb-form-label">Weight (kg) *</label>
                                    <input type="number"
                                           class="tb-form-input"
                                           @bind="request.Weight"
                                           min="30"
                                           max="250"
                                           placeholder="e.g., 72" />
                                </div>
                            </div>

                            <div class="tb-form-col-6">
                                <div class="tb-form-group">
                                    <label class="tb-form-label">Primary Health Goals *</label>
                                    <textarea class="tb-form-textarea"
                                              @bind="request.PrimaryHealthGoals"
                                              placeholder="e.g., Improve glucose stability, support thyroid function"
                                              rows="3"></textarea>
                                    <div class="tb-form-helper">Provide clear objectives to guide formulation.</div>
                                </div>
                            </div>
                            <div class="tb-form-col-6">
                                <div class="tb-form-group">
                                    <label class="tb-form-label">Chronic Conditions</label>
                                    <textarea class="tb-form-textarea"
                                              @bind="request.ChronicConditions"
                                              placeholder="e.g., Hashimoto's, PCOS, IBS"
                                              rows="3"></textarea>
                                    <div class="tb-form-helper">List all chronic conditions (optional).</div>
                                </div>
                            </div>
                            <div class="tb-form-col-6">
                                <div class="tb-form-group">
                                    <label class="tb-form-label">Current Medications</label>
                                    <textarea class="tb-form-textarea"
                                              @bind="request.ChronicMedications"
                                              placeholder="e.g., Metformin 500mg BD, Levothyroxine 75mcg OD"
                                              rows="3"></textarea>
                                    <div class="tb-form-helper">Include dosages if known (optional).</div>
                                </div>
                            </div>

                            <div class="tb-form-col-12">
                                <div class="tb-form-group">
                                    <label class="tb-form-label">Additional Information & Health Goals</label>
                                    <textarea class="tb-form-textarea"
                                              @bind="request.AdditionalInformation"
                                              placeholder="Health goals, lifestyle, diet, allergies, sleep, stress, activity level, specific concerns..."
                                              rows="5"></textarea>
                                    <div class="tb-form-helper">The more context you provide, the more precise the protocol.</div>
                                </div>
                            </div>

                            <div class="tb-form-col-12">
                                <div class="tb-form-group">
                                    <label class="tb-form-label">Attachments (Optional)</label>
                                    <InputFile @ref="fileInputRef"
                                               OnChange="@OnFilesChanged"
                                               hidden="hidden"
                                               multiple
                                               accept=".pdf,.jpg,.jpeg,.png,.txt,.csv,.xlsx,.docx"
                                               style="display: none;" />
                                    <TbButton Variant="filled" Color="secondary" @onclick="OpenFilePicker">
                                        <TbIcon Icon="paperclip" Size="md" />
                                        <span>Attach lab results / DNA reports / files</span>
                                    </TbButton>
                                </div>
                            </div>

                            @if (selectedFiles.Count > 0)
                            {
                                <div class="tb-form-col-12">
                                    <FilePreviewComponent Attachments="@selectedFiles"
                                                         ShowRemoveButton="true"
                                                         OnRemoveClick="@RemoveFile" />
                                </div>
                            }

                            <div class="tb-form-col-12">
                                <div class="tb-practitioner-panel__cta">
                                    <TbButton Variant="filled" Color="primary" @onclick="GenerateBlend" Disabled="@isGenerating">
                                        @if (isGenerating)
                                        {
                                            <TbLoadingSpinner Size="sm" Variant="circular" />
                                            <span>Analyzing & Formulating...</span>
                                        }
                                        else
                                        {
                                            <TbIcon Icon="flask" Size="md" />
                                            <span>Generate evidence-based blend</span>
                                        }
                                    </TbButton>
                                </div>
                            </div>
                        </div>
                    </div>
                }
                else
                {
                    <div class="tb-practitioner-thread">
                        @foreach (var msg in messages)
                        {
                            <ChatMessageComponent Message="@msg" />
                        }
                    </div>
                }

                <div class="tb-practitioner-composer">
                    <div class="tb-practitioner-composer__input-wrap">
                        <textarea class="tb-practitioner-composer__input"
                                  @bind="refinementMessage"
                                  @bind:event="oninput"
                                  placeholder="@GetInputPlaceholder()"
                                  @onkeydown="HandleKeyDown"
                                  disabled="@GetInputDisabled()"
                                  rows="1"></textarea>

                        <button type="button"
                                class="tb-practitioner-composer__send"
                                @onclick="@GetSendAction()"
                                disabled="@GetSendButtonDisabled()">
                            <TbIcon Icon="paper-plane" Size="md" />
                        </button>
                    </div>

                    @if (isGenerating)
                    {
                        <div class="tb-typing">
                            <div class="tb-typing__avatar">
                                <TbIcon Icon="flower" Size="sm" Style="color: white;" />
                            </div>
                            <div class="tb-typing__dots">
                                <span class="tb-typing__dot"></span>
                                <span class="tb-typing__dot"></span>
                                <span class="tb-typing__dot"></span>
                            </div>
                        </div>
                    }
                </div>
            </div>

            <aside class="tb-practitioner-aside">
                <div class="tb-practitioner-aside-card">
                    <p class="tb-eyebrow">Clinical guardrails</p>
                    <h4>What TailorBlend monitors</h4>
                    <ul>
                        <li>
                            <TbIcon Icon="stethoscope" Size="sm" />
                            Dose ranges calibrated to age, weight, and contraindications.
                        </li>
                        <li>
                            <TbIcon Icon="triangle-exclamation" Size="sm" />
                            Cross-checks against medications and chronic conditions.
                        </li>
                        <li>
                            <TbIcon Icon="scroll" Size="sm" />
                            Generates rationale, sourcing tips, and patient guidance.
                        </li>
                    </ul>
                </div>

                <div class="tb-practitioner-aside-card">
                    <p class="tb-eyebrow">Blend playbook</p>
                    <h4>Tips for sharper outputs</h4>
                    <ul>
                        <li>
                            <TbIcon Icon="list-check" Size="sm" />
                            Provide current stack + tolerance notes for safer layering.
                        </li>
                        <li>
                            <TbIcon Icon="chart-simple" Size="sm" />
                            Include objective markers (labs, wearables) for precision.
                        </li>
                        <li>
                            <TbIcon Icon="clock" Size="sm" />
                            Add timing or adherence constraints to shape routines.
                        </li>
                    </ul>
                </div>

                <div class="tb-practitioner-aside-card">
                    <p class="tb-eyebrow">Attachments</p>
                    <h4>Need richer context?</h4>
                    <p>Upload labs, DNA, or practitioner notes to let TailorBlend auto-reference key findings.</p>
                    <TbButton Variant="outlined" Color="primary" Size="sm" StartIcon="upload" @onclick="OpenFilePicker">
                        Upload documents
                    </TbButton>
                </div>
            </aside>
        </div>
    </div>
</section>

@code {
    private ElementReference _messagesContainer;
    private InputFile? fileInputRef;
    private PractitionerBlendRequest request = new();
    private List<FileAttachment> selectedFiles = new();
    private List<ChatMessage> messages = new();
    private string refinementMessage = string.Empty;
    private bool isGenerating;
    private bool blendGenerated;
    private string SessionLabel => BuildSessionLabel();

    private const int MaxFileSizeMB = 10;
    private const int MaxFiles = 5;

    // Helper methods for input bar
    private string GetInputPlaceholder()
    {
        if (!blendGenerated)
            return "Enter patient details or use form above... (Enter to generate)";
        return "Refine blend, adjust dosages, or ask about interactions... (Enter to send)";
    }

    private bool GetInputDisabled()
    {
        return isGenerating;
    }

    private bool GetSendButtonDisabled()
    {
        if (!blendGenerated)
        {
            // Can generate if form is valid OR message is provided
            bool hasFormData = !string.IsNullOrWhiteSpace(request.PatientName) &&
                              !string.IsNullOrWhiteSpace(request.PractitionerEmail);
            bool hasMessage = !string.IsNullOrWhiteSpace(refinementMessage);
            return isGenerating || !(hasFormData || hasMessage);
        }
        return isGenerating || string.IsNullOrWhiteSpace(refinementMessage);
    }

    private Func<Task> GetSendAction()
    {
        return blendGenerated ? SendRefinement : GenerateBlend;
    }

    private string BuildSessionLabel()
    {
        var sessionId = SessionService?.SessionId;
        if (string.IsNullOrEmpty(sessionId))
        {
            return "Session pending";
        }

        var tailLength = Math.Min(6, sessionId.Length);
        var suffix = sessionId.Substring(sessionId.Length - tailLength, tailLength).ToUpperInvariant();
        return $"Session #{suffix}";
    }

    private async Task HandleKeyDown(KeyboardEventArgs e)
    {
        if (e.Key == "Enter" && !e.ShiftKey && !isGenerating)
        {
            if (!string.IsNullOrWhiteSpace(refinementMessage) || !blendGenerated)
            {
                await GetSendAction().Invoke();
            }
        }
    }

    private async Task ScrollToBottom()
    {
        try
        {
            await JS.InvokeVoidAsync("scrollToBottom", "blendMessagesContainer");
        }
        catch
        {
            // Ignore scroll errors
        }
    }

    private async Task OnFilesChanged(InputFileChangeEventArgs e)
    {
        try
        {
            Console.WriteLine($"📂 [PRACTITIONER] OnFilesChanged called with {e.FileCount} file(s)");

            if (selectedFiles.Count >= MaxFiles)
            {
                Console.WriteLine($"⚠️ [PRACTITIONER] Maximum {MaxFiles} files allowed");
                return;
            }

            foreach (var browserFile in e.GetMultipleFiles(MaxFiles))
            {
                if (selectedFiles.Count >= MaxFiles)
                {
                    Console.WriteLine($"⚠️ [PRACTITIONER] Reached maximum {MaxFiles} files");
                    break;
                }

                if (browserFile.Size > MaxFileSizeMB * 1024 * 1024)
                {
                    Console.WriteLine($"⚠️ [PRACTITIONER] File {browserFile.Name} exceeds {MaxFileSizeMB}MB limit");
                    continue;
                }

                Console.WriteLine($"📎 [PRACTITIONER] Reading file: {browserFile.Name} ({browserFile.Size} bytes)");

                using var stream = browserFile.OpenReadStream(MaxFileSizeMB * 1024 * 1024);
                using var ms = new MemoryStream();
                await stream.CopyToAsync(ms);
                var base64Data = Convert.ToBase64String(ms.ToArray());

                var fileAttachment = new FileAttachment
                {
                    FileName = browserFile.Name,
                    Base64Data = base64Data,
                    MimeType = browserFile.ContentType,
                    FileSize = (int)browserFile.Size
                };

                Console.WriteLine($"📎 [PRACTITIONER] Added file: {fileAttachment.FileName} ({fileAttachment.FormattedSize})");
                selectedFiles.Add(fileAttachment);
            }

            Console.WriteLine($"✅ [PRACTITIONER] Total files selected: {selectedFiles.Count}");
            StateHasChanged();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"❌ [PRACTITIONER] File selection error: {ex.Message}");
        }
    }

    private void RemoveFile(FileAttachment file)
    {
        selectedFiles.Remove(file);
        Console.WriteLine($"🗑️ [PRACTITIONER] Removed file: {file.FileName}");
        StateHasChanged();
    }

    private void OpenFilePicker()
    {
        try
        {
            _ = JS.InvokeVoidAsync("triggerFileInput");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"❌ [PRACTITIONER] Failed to open file picker: {ex.Message}");
        }
    }

    private async Task GenerateBlend()
    {
        // VALIDATION DISABLED FOR TESTING
        // if (string.IsNullOrWhiteSpace(request.PatientName) ||
        //     string.IsNullOrWhiteSpace(request.PractitionerEmail) ||
        //     request.Age == 0 ||
        //     string.IsNullOrWhiteSpace(request.Sex) ||
        //     request.Weight == 0)
        // {
        //     Console.WriteLine("❌ [PRACTITIONER] Validation failed - required fields missing");
        //     return;
        // }

        isGenerating = true;
        StateHasChanged();

        try
        {
            Console.WriteLine($"🩺 [PRACTITIONER] Generating blend for: {request.PatientName}");

            // Add user message to chat
            var userMessage = new ChatMessage
            {
                Role = "user",
                Content = request.ToFormattedMessage(),
                Timestamp = DateTime.Now,
                Attachments = new List<FileAttachment>(selectedFiles)
            };
            messages.Add(userMessage);

            // Attach selected files to request
            request.Attachments = new List<FileAttachment>(selectedFiles);

            // Fetch complete response from backend
            var response = await ChatService.SendChatAsync(
                request.ToFormattedMessage(),
                customInstructions: null,
                model: null,
                attachments: request.Attachments,
                practitionerMode: true);

            Console.WriteLine($"✅ [PRACTITIONER] Received {response.Response.Length} chars");

            // Add assistant message immediately
            var assistantMessage = new ChatMessage
            {
                Role = "assistant",
                Content = response.Response,
                Timestamp = DateTime.Now
            };
            messages.Add(assistantMessage);

            blendGenerated = true;
            await ScrollToBottom();
            Console.WriteLine("✅ [PRACTITIONER] Blend generation complete");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"❌ [PRACTITIONER] Error generating blend: {ex.Message}");
        }
        finally
        {
            isGenerating = false;
            StateHasChanged();
        }
    }

    private async Task SendRefinement()
    {
        if (string.IsNullOrWhiteSpace(refinementMessage))
        {
            return;
        }

        isGenerating = true;
        var messageToSend = refinementMessage;
        refinementMessage = string.Empty;
        StateHasChanged();

        try
        {
            Console.WriteLine($"🔧 [PRACTITIONER] Sending refinement: {messageToSend}");

            // Add user message
            var userMessage = new ChatMessage
            {
                Role = "user",
                Content = messageToSend,
                Timestamp = DateTime.Now
            };
            messages.Add(userMessage);

            // Fetch complete response from backend
            var response = await ChatService.SendChatAsync(
                messageToSend,
                customInstructions: null,
                model: null,
                attachments: null,
                practitionerMode: true);

            Console.WriteLine($"✅ [PRACTITIONER] Received {response.Response.Length} chars");

            // Add assistant message immediately
            var assistantMessage = new ChatMessage
            {
                Role = "assistant",
                Content = response.Response,
                Timestamp = DateTime.Now
            };
            messages.Add(assistantMessage);

            await ScrollToBottom();
            Console.WriteLine("✅ [PRACTITIONER] Refinement complete");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"❌ [PRACTITIONER] Error refining blend: {ex.Message}");
        }
        finally
        {
            isGenerating = false;
            StateHasChanged();
        }
    }

    private void ResetForm()
    {
        request = new();
        selectedFiles.Clear();
        messages.Clear();
        refinementMessage = string.Empty;
        blendGenerated = false;
        isGenerating = false;
        StateHasChanged();
    }
}
