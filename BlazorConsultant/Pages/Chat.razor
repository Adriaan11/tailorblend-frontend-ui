@page "/chat"
@using BlazorConsultant.Models
@using BlazorConsultant.Components
@using BlazorConsultant.Helpers
@using Microsoft.AspNetCore.Components.Forms
@inject IChatService ChatService
@inject IChatStateService ChatStateService
@inject ISessionService SessionService
@inject IPromptManagementService PromptService
@inject IJSRuntime JS
@inject ILogger<Chat> Logger
@inject NavigationManager NavManager
@implements IAsyncDisposable

<PageTitle>Chat - TailorBlend AI Consultant</PageTitle>

<!-- Consultation Overview -->
<section class="tb-chat-stage">
    <div class="tb-container">
        <header class="tb-chat-header">
            <div>
                <p class="tb-eyebrow">Live consultation</p>
                <h1>Collaborate with your TailorBlend expert</h1>
                <p class="tb-chat-header__subtitle">
                    Keep conversations fluid while TailorBlend translates every detail into a precise formulation roadmap.
                </p>
            </div>
            <div class="tb-chat-header__actions">
                @if (!string.IsNullOrEmpty(SessionService?.SessionId))
                {
                    <span class="tb-session-pill">@SessionLabel</span>
                }
                <TbButton Variant="outlined" Size="sm" Color="primary" StartIcon="sliders" Class="tb-chat-controls-btn" @onclick="ToggleSettings">
                    Session controls
                </TbButton>
            </div>
        </header>

        <div class="tb-chat-meta">
            <div class="tb-meta-chip">
                <TbIcon Icon="cpu" Size="sm" />
                <span>@(selectedModel?.ToUpperInvariant() ?? "MODEL")</span>
            </div>
            <div class="tb-meta-chip">
                <TbIcon Icon="gauge" Size="sm" />
                <span>@(reasoningEffort.ToUpperInvariant()) effort</span>
            </div>
            <div class="tb-meta-chip">
                <TbIcon Icon="lines-leaning" Size="sm" />
                <span>@(verbosity.ToUpperInvariant()) detail</span>
            </div>
            <div class="tb-meta-chip">
                <TbIcon Icon="sparkles" Size="sm" />
                <span>@(typewriterEnabled ? "Typewriter on" : "Instant responses")</span>
            </div>
        </div>
    </div>
</section>

<section class="tb-chat-live">
    <div class="tb-container">
        <div class="tb-chat-shell">
            <!-- Backdrop for bottom sheet -->
            <div class="tb-backdrop @(_showSettings ? "active" : "")" @onclick="CloseSettings"></div>

            <!-- Main Chat Container -->
            <div class="tb-chat-container">
                <!-- Messages Area -->
                <div class="tb-chat-messages" id="messagesContainer" @ref="_messagesContainer">
                    <!-- Empty State -->
                    @if (ChatStateService.Messages.Count == 0 && !ChatStateService.IsLoading)
                    {
                        <div class="tb-chat-onboarding">
                            <div class="tb-chat-welcome">
                                <div class="tb-chat-welcome__badge">
                                    <TbIcon Icon="sparkles" Size="sm" />
                                    AI-powered consultation
                                </div>
                                <div class="tb-chat-welcome__icon">
                                    <div class="tb-icon-container tb-icon-container--accent">
                                        <TbIcon Icon="flower" Color="success" Size="lg" />
                                    </div>
                                </div>
                                <h2>Ready to create your perfect blend?</h2>
                                <p>
                                    Share your goals, lifestyle, and preferences. TailorBlend responds with focused guidance in real time and remembers every detail.
                                </p>
                                <div class="tb-chat-welcome__chips">
                                    <span class="tb-chip">
                                        <TbIcon Icon="dumbbell" Size="sm" />
                                        Fitness & Performance
                                    </span>
                                    <span class="tb-chip">
                                        <TbIcon Icon="meditation" Size="sm" />
                                        Stress & Sleep
                                    </span>
                                    <span class="tb-chip">
                                        <TbIcon Icon="utensils" Size="sm" />
                                        Nutrition Gaps
                                    </span>
                                </div>
                            </div>

                            <div class="tb-quick-actions tb-quick-actions--grid">
                                @foreach (var example in examplePrompts)
                                {
                                    <button type="button" class="tb-quick-action" @onclick="() => SendExampleMessage(example)">
                                        <TbIcon Icon="arrow-up-right-dots" Size="sm" />
                                        <span>@example</span>
                                    </button>
                                }
                            </div>

                            <div class="tb-chat-profile">
                                <p class="tb-chat-profile__title">Context boosts precision</p>
                                <UserProfileComponent Profile="@userProfile" OnProfileChanged="HandleProfileChanged" />
                            </div>
                        </div>
                    }
                    else
                    {
                        <!-- Messages List -->
                        @foreach (var msg in ChatStateService.Messages)
                        {
                            <ChatMessageComponent
                                Message="@msg"
                                TypewriterEnabled="@typewriterEnabled"
                                @key="@($"{msg.Timestamp.Ticks}_{msg.Role}")" />
                        }
                    }

                    <!-- Typing Indicator -->
                    @if (ChatStateService.IsLoading)
                    {
                        <div class="tb-typing">
                            <div class="tb-typing__avatar">
                                <TbIcon Icon="flower" Size="sm" Style="color: white;" />
                            </div>
                            <div class="tb-typing__dots">
                                <span class="tb-typing__dot"></span>
                                <span class="tb-typing__dot"></span>
                                <span class="tb-typing__dot"></span>
                            </div>
                        </div>
                    }
                </div>

                <!-- File Preview (if files selected) -->
                @if (selectedFiles.Count > 0)
                {
                    <div class="tb-chat-attachments">
                        <FilePreviewComponent Attachments="@selectedFiles"
                                             ShowRemoveButton="true"
                                             OnRemoveClick="@RemoveFile" />
                    </div>
                }

                <!-- Chat Input Area -->
                <div class="tb-chat-input-container">
                    <div class="tb-chat-input-wrapper">
                        <!-- File Upload (Hidden) -->
            <InputFile @ref="fileInputRef"
                       id="chat-file-input"
                       data-tb-file-input="true"
                       OnChange="@OnFilesChanged"
                       hidden="hidden"
                       multiple
                       capture="environment"
                       accept="image/*,video/*,.pdf,.txt,.csv,.xlsx,.docx"
                                   style="display: none;" />

                        <!-- Attach Button -->
                        <button type="button"
                                class="tb-icon-btn"
                                @onclick="OpenFilePicker"
                                disabled="@ChatStateService.IsLoading"
                                title="Attach files">
                            <TbIcon Icon="paperclip" Size="md" />
                        </button>

                        <!-- Session Controls Shortcut -->
                        <button type="button"
                                class="tb-icon-btn tb-icon-btn--ghost"
                                @onclick="ToggleSettings"
                                disabled="@ChatStateService.IsLoading"
                                title="Session controls">
                            <TbIcon Icon="sliders" Size="md" />
                        </button>

                        <!-- Text Input -->
                        <textarea class="tb-chat-input"
                                  @ref="_chatInputRef"
                                  @bind="userInput"
                                  @bind:event="oninput"
                                  @oninput="HandleInputChange"
                                  placeholder="Type your message..."
                                  @onkeydown="HandleKeyPress"
                                  disabled="@ChatStateService.IsLoading"
                                  rows="1"></textarea>

                        <!-- Send Button -->
                        <button type="button"
                                class="tb-chat-send-btn"
                                @onclick="SendMessage"
                                disabled="@ChatStateService.IsLoading">
                            <TbIcon Icon="paper-plane" Size="md" />
                        </button>
                    </div>
                </div>
            </div>
        </div>
    </div>
</section>

<!-- Bottom Sheet (Settings & Stats) -->
<div class="tb-bottom-sheet @(_showSettings ? "active" : "")">
    <div class="tb-bottom-sheet__panel">
        <div class="tb-bottom-sheet__handle"></div>
        <div class="tb-bottom-sheet__header">
            <div>
                <p class="tb-eyebrow">Session controls</p>
                <h3>Fine-tune the consultant</h3>
            </div>
            <button type="button" class="tb-sheet-close" title="Close" @onclick="CloseSettings">
                <TbIcon Icon="xmark" Size="sm" />
            </button>
        </div>

        <div class="tb-bottom-sheet__grid">
            <!-- Model Selection -->
            <div class="tb-sheet-card tb-sheet-card--accent">
                <div class="tb-sheet-card__header">
                    <div class="tb-sheet-card__icon tb-sheet-card__icon--info">
                        <TbIcon Icon="brain" Size="sm" />
                    </div>
                    <div>
                        <p class="tb-sheet-card__label">AI model</p>
                        <h4>Choose the engine</h4>
                    </div>
                </div>
                <TbSelect Value="@selectedModel"
                          ValueChanged="@OnModelChanged"
                          Options="@(availableModels.Select(m => m.ModelId).ToList())"
                          Label="Select Model" />
            </div>

            <!-- System Prompt Selection -->
            <div class="tb-sheet-card">
                <div class="tb-sheet-card__header">
                    <div class="tb-sheet-card__icon tb-sheet-card__icon--info">
                        <TbIcon Icon="file-lines" Size="sm" />
                    </div>
                    <div>
                        <p class="tb-sheet-card__label">System Instructions</p>
                        <h4>Select prompt template</h4>
                    </div>
                </div>
                <PromptSelector
                    @bind-SelectedPromptId="_selectedPromptId"
                    @bind-SelectedPromptContent="_selectedPromptContent"
                    HelperText="Choose the AI's personality and behavior" />
                <div class="mt-2">
                    <TbButton Variant="outlined" Size="sm" Color="default" StartIcon="pen"
                              @onclick="@(() => NavManager.NavigateTo("/prompts"))">
                        Manage Prompts
                    </TbButton>
                </div>
            </div>

            <!-- Display Options -->
            <div class="tb-sheet-card">
                <div class="tb-sheet-card__header">
                    <div class="tb-sheet-card__icon tb-sheet-card__icon--accent">
                        <TbIcon Icon="paintbrush" Size="sm" />
                    </div>
                    <div>
                        <p class="tb-sheet-card__label">Display</p>
                        <h4>Visual preferences</h4>
                    </div>
                </div>
                <TbCheckbox @bind-Checked="typewriterEnabled"
                            Label="Typewriter effect" />
                <p class="tb-sheet-card__hint">
                    Gradually reveal AI responses
                </p>
            </div>

            <!-- GPT-5 Settings -->
            @if (isGpt5Selected)
            {
                <div class="tb-sheet-card">
                    <div class="tb-sheet-card__header">
                        <div class="tb-sheet-card__icon tb-sheet-card__icon--warning">
                            <TbIcon Icon="sliders" Size="sm" />
                        </div>
                        <div>
                            <p class="tb-sheet-card__label">GPT-5</p>
                            <h4>Advanced controls</h4>
                        </div>
                    </div>
                    <div class="tb-sheet-card__group">
                        <p class="tb-sheet-card__label">Reasoning effort</p>
                        <TbRadioGroup Value="@reasoningEffort"
                                      ValueChanged="@((string val) => reasoningEffort = val)"
                                      Options="@(new List<string> { "minimal", "low", "medium", "high" })"
                                      OptionLabels="@(new List<string> { "Minimal (fastest)", "Low", "Medium (balanced)", "High (thorough)" })" />
                    </div>
                    <div class="tb-sheet-card__group">
                        <p class="tb-sheet-card__label">Response style</p>
                        <TbSelect Value="@verbosity"
                                  ValueChanged="@((string val) => verbosity = val)"
                                  Options="@(new List<string> { "low", "medium", "high" })"
                                  Label="Select Response Style" />
                    </div>
                </div>
            }

            <!-- Session Stats -->
            <div class="tb-sheet-card">
                <div class="tb-sheet-card__header">
                    <div class="tb-sheet-card__icon tb-sheet-card__icon--accent">
                        <TbIcon Icon="chart-simple" Size="sm" />
                    </div>
                    <div>
                        <p class="tb-sheet-card__label">Session stats</p>
                        <h4>Track performance</h4>
                    </div>
                </div>
                <SessionStatsComponent @ref="sessionStatsRef" SessionId="@SessionService.SessionId" />
            </div>

            <!-- Actions -->
            <div class="tb-sheet-card">
                <div class="tb-sheet-card__header">
                    <div class="tb-sheet-card__icon tb-sheet-card__icon--warning">
                        <TbIcon Icon="gear" Size="sm" />
                    </div>
                    <div>
                        <p class="tb-sheet-card__label">Actions</p>
                        <h4>Manage session</h4>
                    </div>
                </div>
                <div class="tb-sheet-card__actions">
                    <button type="button"
                            class="tb-btn tb-btn--secondary tb-btn--full"
                            @onclick="RefreshStats"
                            disabled="@isRefreshing">
                        @if (isRefreshing)
                        {
                            <TbLoadingSpinner Size="sm" Variant="circular" />
                            <span>Refreshing...</span>
                        }
                        else
                        {
                            <TbIcon Icon="refresh" Size="sm" />
                            <span>Refresh Stats</span>
                        }
                    </button>

                    <button type="button"
                            class="tb-btn tb-btn--primary tb-btn--full"
                            @onclick="ResetConversation"
                            disabled="@isResetting">
                        @if (isResetting)
                        {
                            <TbLoadingSpinner Size="sm" Variant="circular" />
                            <span>Resetting...</span>
                        }
                        else
                        {
                            <TbIcon Icon="rotate-left" Size="sm" />
                            <span>Reset Session</span>
                        }
                    </button>

                    <div class="tb-divider"></div>

                    <div class="tb-sheet-card__export">
                        <button type="button"
                                class="tb-btn tb-btn--ghost tb-btn--full"
                                @onclick="ExportAsMarkdown"
                                disabled="@(ChatStateService.Messages.Count == 0)">
                            <TbIcon Icon="file-text" Size="sm" />
                            <span>Export MD</span>
                        </button>
                        <button type="button"
                                class="tb-btn tb-btn--ghost tb-btn--full"
                                @onclick="ExportAsJson"
                                disabled="@(ChatStateService.Messages.Count == 0)">
                            <TbIcon Icon="code" Size="sm" />
                            <span>Export JSON</span>
                        </button>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

@code {
    private string userInput = string.Empty;
    private bool isRefreshing;
    private bool _disposed;
    private bool isResetting;
    private SessionStatsComponent? sessionStatsRef;
    private ElementReference _messagesContainer;
    private ElementReference _chatInputRef;
    private string selectedModel = "gpt-5-mini";
    private bool _showSettings = false;
    private string SessionLabel => BuildSessionLabel();

    // Async tracking
    private readonly CancellationTokenSource _componentCts = new();
    private readonly DisposalGuard _disposalGuard = new();
    private Task? _statsRefreshTask;

    // Typewriter
    private bool typewriterEnabled
    {
        get => _typewriterEnabled;
        set
        {
            if (_typewriterEnabled == value)
                return;

            _typewriterEnabled = value;
            Logger.LogInformation("Typewriter effect toggled: {Enabled}", value);
        }
    }

    private bool _typewriterEnabled = true;

    // User Profile
    private UserProfile userProfile = new();

    // File attachment support
    private InputFile? fileInputRef;
    private List<FileAttachment> selectedFiles = new();
    private const int MaxFileSizeMB = 10;

    // GPT-5 specific settings
    private string reasoningEffort = "minimal";
    private string verbosity = "medium";
    private bool isGpt5Selected => selectedModel?.StartsWith("gpt-5") ?? false;
    private const int MaxFiles = 5;

    // System prompt selection
    private int? _selectedPromptId;
    private string? _selectedPromptContent;

    private readonly string[] examplePrompts = new[]
    {
        "Help me build a daily blend for focus and sustained energy.",
        "I'm training for a half marathon and need recovery support.",
        "Create a vegan-friendly stack that improves sleep quality.",
    };

    private readonly List<ModelOption> availableModels = new()
    {
        new ModelOption
        {
            Id = "gpt-5-mini",
            DisplayName = "GPT-5 Mini",
            ModelId = "gpt-5-mini",
            Description = "Balanced reasoning & cost (default)"
        },
        new ModelOption
        {
            Id = "gpt-5",
            DisplayName = "GPT-5",
            ModelId = "gpt-5",
            Description = "Most capable reasoning model"
        },
        new ModelOption
        {
            Id = "gpt-5-nano",
            DisplayName = "GPT-5 Nano",
            ModelId = "gpt-5-nano",
            Description = "Ultra-fast responses"
        }
    };

    protected override void OnInitialized()
    {
        ChatStateService.OnStateChanged += HandleStateChanged;
    }

    private string BuildSessionLabel()
    {
        var sessionId = SessionService?.SessionId;
        if (string.IsNullOrEmpty(sessionId))
        {
            return "Session pending";
        }

        var segmentLength = Math.Min(6, sessionId.Length);
        var suffix = sessionId.Substring(sessionId.Length - segmentLength, segmentLength).ToUpperInvariant();
        return $"Session #{suffix}";
    }

    private void HandleStateChanged(object? sender, EventArgs e)
    {
        InvokeAsync(async () =>
        {
            try
            {
                if (_disposalGuard.IsDisposed) return;

                if (_disposalGuard.IsDisposed) return;

                StateHasChanged();
                await ScrollToBottomAsync();
            }
            catch (Exception ex)
            {
                Logger.LogError(ex, "HandleStateChanged failed");
            }
        });
    }

    private async Task SendMessage()
    {
        if (string.IsNullOrWhiteSpace(userInput) || ChatStateService.IsLoading)
            return;

        var message = userInput.Trim();
        userInput = string.Empty;

        // Profile enrichment
        if (userProfile.HasAnyData())
        {
            message = $"{message}{userProfile.ToContextString()}";
            Logger.LogInformation("Appending profile context to message");
        }

        // Send message with attachments (if any)
        var attachments = selectedFiles.Count > 0 ? new List<FileAttachment>(selectedFiles) : null;

        Logger.LogInformation("Sending chat message: {MessagePreview}... with {AttachmentCount} attachments",
            message.Substring(0, Math.Min(50, message.Length)),
            attachments?.Count ?? 0);

        if (!string.IsNullOrEmpty(_selectedPromptContent))
        {
            Logger.LogInformation("✅ Chat.razor: Using custom prompt (Prompt ID: {PromptId}, Length: {Length} chars)",
                _selectedPromptId, _selectedPromptContent.Length);
        }
        else
        {
            Logger.LogWarning("⚠️ Chat.razor: No custom prompt selected - backend will use instructions.txt");
        }

        await ChatStateService.SendMessageAsync(
            message,
            attachments,
            customInstructions: _selectedPromptContent,
            reasoningEffort: isGpt5Selected ? reasoningEffort : null,
            verbosity: isGpt5Selected ? verbosity : null
        );

        // Clear attachments after sending
        selectedFiles.Clear();
        // Note: InputFile doesn't need explicit clearing

        await ScrollToBottomAsync();
    }

    private async Task OnFilesChanged(InputFileChangeEventArgs e)
    {
        try
        {
            Logger.LogInformation("File upload initiated with {FileCount} file(s)", e.FileCount);

            if (selectedFiles.Count >= MaxFiles)
            {
                Logger.LogWarning("Maximum {MaxFiles} files already selected", MaxFiles);
                return;
            }

            foreach (var browserFile in e.GetMultipleFiles(MaxFiles))
            {
                if (selectedFiles.Count >= MaxFiles)
                {
                    Logger.LogWarning("Reached maximum {MaxFiles} files, skipping remaining uploads", MaxFiles);
                    break;
                }

                if (browserFile.Size > MaxFileSizeMB * 1024 * 1024)
                {
                    Logger.LogWarning("File {FileName} exceeds {MaxSize}MB limit", browserFile.Name, MaxFileSizeMB);
                    continue;
                }

                Logger.LogInformation("Reading file: {FileName} ({FileSize} bytes)", browserFile.Name, browserFile.Size);

                using var stream = browserFile.OpenReadStream(MaxFileSizeMB * 1024 * 1024);
                using var ms = new MemoryStream();
                await stream.CopyToAsync(ms);
                var base64Data = Convert.ToBase64String(ms.ToArray());

                var fileAttachment = new FileAttachment
                {
                    FileName = browserFile.Name,
                    Base64Data = base64Data,
                    MimeType = browserFile.ContentType,
                    FileSize = (int)browserFile.Size
                };

                Logger.LogInformation("Added file: {FileName} ({FormattedSize}), MIME: {MimeType}",
                    fileAttachment.FileName, fileAttachment.FormattedSize, fileAttachment.MimeType);

                selectedFiles.Add(fileAttachment);
            }

            Logger.LogInformation("Total files selected: {FileCount}", selectedFiles.Count);

            if (!_disposed)
                StateHasChanged();
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "File selection error");
        }
    }

    private async Task RemoveFile(FileAttachment file)
    {
        selectedFiles.Remove(file);
        Logger.LogInformation("Removed file: {FileName}", file.FileName);

        if (!_disposed)
            StateHasChanged();
    }

    private void OpenFilePicker()
    {
        // Use JS interop to trigger file picker
        try
        {
            _ = JS.InvokeVoidAsync("triggerFileInput");
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Failed to open file picker");
        }
    }

    private async Task SendExampleMessage(string example)
    {
        userInput = example;
        await SendMessage();
    }

    private async Task HandleKeyPress(KeyboardEventArgs e)
    {
        if (e.Key == "Enter" && !e.ShiftKey)
        {
            await SendMessage();
        }
    }

    private async Task HandleInputChange(ChangeEventArgs e)
    {
        userInput = e.Value?.ToString() ?? string.Empty;

        // Auto-resize textarea
        try
        {
            await JS.InvokeVoidAsync("tbMobile.autoResizeTextarea", _chatInputRef);
        }
        catch (Exception ex)
        {
            Logger.LogWarning(ex, "Failed to auto-resize textarea");
        }
    }

    private async Task RefreshStats()
    {
        if (sessionStatsRef == null || isRefreshing)
            return;

        isRefreshing = true;
        try
        {
            await sessionStatsRef.RefreshStats();
        }
        finally
        {
            isRefreshing = false;
            StateHasChanged();
        }
    }

    private async Task ResetConversation()
    {
        if (isResetting)
            return;

        isResetting = true;
        try
        {
            ChatStateService.Clear();
            SessionService.Reset();

            var resetSucceeded = await ChatService.ResetSessionAsync();

            if (!resetSucceeded)
            {
                Logger.LogWarning("Backend session reset failed for session {SessionId}", SessionService.SessionId);
                // Note: Could show a TbAlert here if needed, for now just log
            }
            else
            {
                Logger.LogInformation("Session reset successful for session {SessionId}", SessionService.SessionId);
            }

            await RefreshStats();
        }
        finally
        {
            isResetting = false;
            await ScrollToBottomAsync();
        }
    }

    private async Task HandleProfileChanged(UserProfile profile)
    {
        userProfile = profile;
        Logger.LogInformation("User profile updated: has data = {HasData}", profile.HasAnyData());
        StateHasChanged();
        await Task.CompletedTask;
    }

    private void ToggleSettings()
    {
        _showSettings = !_showSettings;
    }

    private void CloseSettings()
    {
        _showSettings = false;
    }

    private async Task OnModelChanged(string newModel)
    {
        if (selectedModel == newModel)
            return;

        selectedModel = newModel;
        SessionService.SetModel(newModel);

        if (newModel?.StartsWith("gpt-5") == true)
        {
            reasoningEffort = "minimal";
            verbosity = "medium";
        }

        await ResetConversation();
    }

    private async Task ScrollToBottomAsync()
    {
        try
        {
            await JS.InvokeVoidAsync("scrollToBottom", _messagesContainer);
        }
        catch (JSDisconnectedException ex)
        {
            Logger.LogError(ex, "SignalR circuit disconnected during scroll. User has lost connection.");
        }
        catch (JSException ex)
        {
            Logger.LogWarning(ex, "JavaScript scroll function failed: {Message}", ex.Message);
        }
        catch (ObjectDisposedException)
        {
            // Component disposed during scroll - expected during navigation
        }
        catch (Exception ex)
        {
            Logger.LogWarning(ex, "Unexpected error during scroll operation");
        }
    }

    private async Task ExportAsMarkdown()
    {
        var markdown = "# TailorBlend Consultation\n\n";
        markdown += $"**Session ID:** {SessionService.SessionId}\n";
        markdown += $"**Date:** {DateTime.Now:yyyy-MM-dd HH:mm:ss}\n";
        markdown += $"**Model:** {selectedModel}\n\n";
        markdown += "---\n\n";

        foreach (var message in ChatStateService.Messages)
        {
            var role = message.Role == "user" ? "You" : "TailorBlend AI";
            markdown += $"### {role} ({message.Timestamp:HH:mm})\n\n";
            markdown += $"{message.Content}\n\n";
        }

        await DownloadFile("tailorblend-consultation.md", markdown, "text/markdown");
    }

    private async Task ExportAsJson()
    {
        var export = new
        {
            SessionId = SessionService.SessionId,
            ExportDate = DateTime.Now,
            Model = selectedModel,
            Messages = ChatStateService.Messages.Select(m => new
            {
                m.Role,
                m.Content,
                m.Timestamp
            })
        };

        var json = System.Text.Json.JsonSerializer.Serialize(export, new System.Text.Json.JsonSerializerOptions
        {
            WriteIndented = true
        });

        await DownloadFile("tailorblend-consultation.json", json, "application/json");
    }

    private async Task DownloadFile(string filename, string content, string contentType)
    {
        var bytes = System.Text.Encoding.UTF8.GetBytes(content);
        var base64 = Convert.ToBase64String(bytes);
        await JS.InvokeVoidAsync("downloadFile", filename, base64, contentType);
    }

    public async ValueTask DisposeAsync()
    {
        if (_disposed)
            return;

        _disposed = true;

        Logger.LogInformation("Disposing Chat component");

        _componentCts.Cancel();

        if (_statsRefreshTask != null && !_statsRefreshTask.IsCompleted)
        {
            try
            {
                await Task.WhenAny(_statsRefreshTask, Task.Delay(1000));
            }
            catch
            {
                // Ignore exceptions during cleanup
            }
        }

        ChatStateService.OnStateChanged -= HandleStateChanged;

        await _disposalGuard.DisposeAsync();
        _componentCts.Dispose();

        if (ChatStateService is IAsyncDisposable asyncDisposable)
        {
            await asyncDisposable.DisposeAsync();
        }
    }
}

<script>
    function scrollToBottom(element) {
        if (element) {
            element.scrollTop = element.scrollHeight;
        }
    }

    function copyCode(elementId) {
        const codeElement = document.getElementById(elementId);
        if (!codeElement) return;

        const code = codeElement.textContent;
        navigator.clipboard.writeText(code).then(() => {
            const codeBlock = codeElement.closest('.tb-code-block');
            const copyBtn = codeBlock?.querySelector('.tb-code-copy');
            if (copyBtn) {
                const originalText = copyBtn.innerHTML;
                copyBtn.classList.add('copied');
                copyBtn.innerHTML = 'Copied!';

                setTimeout(() => {
                    copyBtn.classList.remove('copied');
                    copyBtn.innerHTML = originalText;
                }, 2000);
            }
        }).catch(err => {
            console.error('Failed to copy code:', err);
        });
    }

    function downloadFile(filename, base64Content, contentType) {
        const byteCharacters = atob(base64Content);
        const byteNumbers = new Array(byteCharacters.length);
        for (let i = 0; i < byteCharacters.length; i++) {
            byteNumbers[i] = byteCharacters.charCodeAt(i);
        }
        const byteArray = new Uint8Array(byteNumbers);
        const blob = new Blob([byteArray], { type: contentType });
        const url = URL.createObjectURL(blob);

        const link = document.createElement('a');
        link.href = url;
        link.download = filename;
        document.body.appendChild(link);
        link.click();
        document.body.removeChild(link);
        URL.revokeObjectURL(url);
    }
</script>
