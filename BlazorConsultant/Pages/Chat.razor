@page "/chat"
@using BlazorConsultant.Models
@using BlazorConsultant.Components
@using BlazorConsultant.Helpers
@using Microsoft.AspNetCore.Components.Forms
@inject IChatService ChatService
@inject IChatStateService ChatStateService
@inject ISessionService SessionService
@inject IJSRuntime JS
@inject ILogger<Chat> Logger
@implements IAsyncDisposable

<PageTitle>Chat - TailorBlend AI Consultant</PageTitle>

<!-- Backdrop for bottom sheet -->
<div class="tb-backdrop @(_showSettings ? "active" : "")" @onclick="CloseSettings"></div>

<!-- Main Chat Container -->
<div class="tb-chat-container">
    <!-- Messages Area -->
    <div class="tb-chat-messages" id="messagesContainer" @ref="_messagesContainer">
        <!-- Empty State -->
        @if (ChatStateService.Messages.Count == 0 && !ChatStateService.IsLoading)
        {
            <div class="tb-empty-state">
                <div class="tb-badge" style="margin: 0 auto var(--tb-space-12);">
                    <TbIcon Icon="sparkles" Size="sm" />
                    AI-Powered Consultation
                </div>
                <div class="tb-empty-state__icon">
                    <div class="tb-icon-container tb-icon-container--accent" style="width: 64px; height: 64px; margin: 0 auto var(--tb-space-16);">
                        <TbIcon Icon="flower" Color="success" Style="font-size: 1.75rem;" />
                    </div>
                </div>
                <h2 class="tb-empty-state__title">Ready to create your perfect blend?</h2>
                <p class="tb-empty-state__text">
                    Share your goals, lifestyle, and preferences. TailorBlend will respond with targeted guidance in real time.
                </p>
                <div style="display: flex; flex-wrap: wrap; gap: var(--tb-space-8); justify-content: center; margin-bottom: var(--tb-space-16);">
                    <span class="tb-chip">
                        <TbIcon Icon="dumbbell" Size="sm" />
                        Fitness & Performance
                    </span>
                    <span class="tb-chip">
                        <TbIcon Icon="meditation" Size="sm" />
                        Stress & Sleep
                    </span>
                    <span class="tb-chip">
                        <TbIcon Icon="utensils" Size="sm" />
                        Nutrition Gaps
                    </span>
                </div>
            </div>

            <!-- Quick Actions -->
            <div class="tb-quick-actions">
                @foreach (var example in examplePrompts)
                {
                    <button type="button" class="tb-quick-action" @onclick="() => SendExampleMessage(example)">
                        @example
                    </button>
                }
            </div>

            <!-- User Profile Component -->
            <UserProfileComponent Profile="@userProfile" OnProfileChanged="HandleProfileChanged" />
        }
        else
        {
            <!-- Messages List -->
            @foreach (var msg in ChatStateService.Messages)
            {
                <ChatMessageComponent
                    Message="@msg"
                    TypewriterEnabled="@typewriterEnabled"
                    @key="@($"{msg.Timestamp.Ticks}_{msg.Role}")" />
            }
        }

        <!-- Typing Indicator -->
        @if (ChatStateService.IsLoading)
        {
            <div class="tb-typing">
                <div class="tb-typing__avatar">
                    <TbIcon Icon="flower" Size="sm" Style="color: white;" />
                </div>
                <div class="tb-typing__dots">
                    <span class="tb-typing__dot"></span>
                    <span class="tb-typing__dot"></span>
                    <span class="tb-typing__dot"></span>
                </div>
            </div>
        }
    </div>

    <!-- File Preview (if files selected) -->
    @if (selectedFiles.Count > 0)
    {
        <div style="border-top: 1px solid var(--tb-border); background: var(--tb-surface); padding: var(--tb-space-12) var(--tb-space-16);">
            <FilePreviewComponent Attachments="@selectedFiles"
                                 ShowRemoveButton="true"
                                 OnRemoveClick="@RemoveFile" />
        </div>
    }

    <!-- Chat Input Area -->
    <div class="tb-chat-input-container">
        <div class="tb-chat-input-wrapper">
            <!-- File Upload (Hidden) -->
            <InputFile @ref="fileInputRef"
                       OnChange="@OnFilesChanged"
                       hidden="hidden"
                       multiple
                       accept=".pdf,.jpg,.jpeg,.png,.gif,.txt,.csv,.xlsx,.docx"
                       style="display: none;" />

            <!-- Attach Button -->
            <button type="button"
                    class="tb-icon-btn"
                    @onclick="OpenFilePicker"
                    disabled="@ChatStateService.IsLoading"
                    title="Attach files">
                <TbIcon Icon="paperclip" Size="md" />
            </button>

            <!-- Text Input -->
            <textarea class="tb-chat-input"
                      @bind="userInput"
                      @bind:event="oninput"
                      placeholder="Type your message..."
                      @onkeydown="HandleKeyPress"
                      disabled="@ChatStateService.IsLoading"
                      rows="1"></textarea>

            <!-- Send Button -->
            <button type="button"
                    class="tb-chat-send-btn"
                    @onclick="SendMessage"
                    disabled="@ChatStateService.IsLoading">
                <TbIcon Icon="paper-plane" Size="md" />
            </button>
        </div>
    </div>
</div>

<!-- Floating Action Button (Settings) -->
<button class="tb-fab" @onclick="ToggleSettings" title="Settings & Stats">
    <TbIcon Icon="@(_showSettings ? "xmark" : "sliders")" Size="md" />
</button>

<!-- Bottom Sheet (Settings & Stats) -->
<div class="tb-bottom-sheet @(_showSettings ? "active" : "")">
    <div class="tb-bottom-sheet__handle"></div>
    <div class="tb-bottom-sheet__content">
        <!-- Model Selection -->
        <div class="tb-card tb-card--flat" style="margin-bottom: var(--tb-space-16); background: var(--tb-indigo-soft); border-left: 3px solid var(--tb-indigo);">
            <div style="display: flex; align-items: center; gap: var(--tb-space-12); margin-bottom: var(--tb-space-12);">
                <div class="tb-icon-container tb-icon-container--info tb-icon-container--sm">
                    <TbIcon Icon="brain" Size="sm" Color="info" />
                </div>
                <h3 class="tb-heading-sm" style="margin: 0;">AI Model</h3>
            </div>
            <TbSelect Value="@selectedModel"
                      ValueChanged="@OnModelChanged"
                      Options="@(availableModels.Select(m => m.ModelId).ToList())"
                      Label="Select Model" />
        </div>

        <!-- Display Options -->
        <div class="tb-card tb-card--flat" style="margin-bottom: var(--tb-space-16);">
            <div style="display: flex; align-items: center; gap: var(--tb-space-12); margin-bottom: var(--tb-space-12);">
                <div class="tb-icon-container tb-icon-container--accent tb-icon-container--sm">
                    <TbIcon Icon="paintbrush" Size="sm" Color="accent" />
                </div>
                <h3 class="tb-heading-sm" style="margin: 0;">Display Options</h3>
            </div>
            <TbCheckbox @bind-Checked="typewriterEnabled"
                        Label="Typewriter effect" />
            <p style="font-size: 0.75rem; color: var(--text-muted); margin-top: var(--tb-space-4);">
                Gradually reveal AI responses
            </p>
        </div>

        <!-- GPT-5 Settings -->
        @if (isGpt5Selected)
        {
            <div class="tb-card tb-card--flat" style="margin-bottom: var(--tb-space-16);">
                <h3 class="tb-heading-sm">GPT-5 Settings</h3>

                <div style="margin-bottom: var(--tb-space-16);">
                    <p style="font-weight: 600; margin-bottom: var(--tb-space-8); color: var(--text-primary);">Reasoning Effort</p>
                    <TbRadioGroup Value="@reasoningEffort"
                                  ValueChanged="@((string val) => reasoningEffort = val)"
                                  Options="@(new List<string> { "minimal", "low", "medium", "high" })"
                                  OptionLabels="@(new List<string> { "Minimal (fastest)", "Low", "Medium (balanced)", "High (thorough)" })" />
                </div>

                <div>
                    <p style="font-weight: 600; margin-bottom: var(--tb-space-8); color: var(--text-primary);">Response Style</p>
                    <TbSelect Value="@verbosity"
                              ValueChanged="@((string val) => verbosity = val)"
                              Options="@(new List<string> { "low", "medium", "high" })"
                              Label="Select Response Style" />
                </div>
            </div>
        }

        <!-- Session Stats -->
        <div class="tb-card tb-card--flat" style="margin-bottom: var(--tb-space-16);">
            <div style="display: flex; align-items: center; gap: var(--tb-space-12); margin-bottom: var(--tb-space-12);">
                <div class="tb-icon-container tb-icon-container--accent tb-icon-container--sm">
                    <TbIcon Icon="chart-simple" Size="sm" Color="accent" />
                </div>
                <h3 class="tb-heading-sm" style="margin: 0;">Session Stats</h3>
            </div>
            <SessionStatsComponent @ref="sessionStatsRef" SessionId="@SessionService.SessionId" />
        </div>

        <!-- Actions -->
        <div class="tb-card tb-card--flat">
            <div style="display: flex; align-items: center; gap: var(--tb-space-12); margin-bottom: var(--tb-space-12);">
                <div class="tb-icon-container tb-icon-container--warning tb-icon-container--sm">
                    <TbIcon Icon="gear" Size="sm" Color="warning" />
                </div>
                <h3 class="tb-heading-sm" style="margin: 0;">Actions</h3>
            </div>
            <div style="display: flex; flex-direction: column; gap: var(--tb-space-12);">
                <button type="button"
                        class="tb-btn tb-btn--secondary"
                        @onclick="RefreshStats"
                        disabled="@isRefreshing">
                    @if (isRefreshing)
                    {
                        <TbLoadingSpinner Size="sm" Variant="circular" />
                        <span>Refreshing...</span>
                    }
                    else
                    {
                        <TbIcon Icon="refresh" Size="sm" />
                        <span>Refresh Stats</span>
                    }
                </button>

                <button type="button"
                        class="tb-btn tb-btn--primary"
                        @onclick="ResetConversation"
                        disabled="@isResetting">
                    @if (isResetting)
                    {
                        <TbLoadingSpinner Size="sm" Variant="circular" />
                        <span>Resetting...</span>
                    }
                    else
                    {
                        <TbIcon Icon="rotate-left" Size="sm" />
                        <span>Reset Session</span>
                    }
                </button>

                <div class="tb-divider"></div>

                <div style="display: flex; gap: var(--tb-space-8);">
                    <button type="button"
                            class="tb-btn tb-btn--ghost"
                            @onclick="ExportAsMarkdown"
                            disabled="@(ChatStateService.Messages.Count == 0)"
                            style="flex: 1;">
                        <TbIcon Icon="file-text" Size="sm" />
                        <span>MD</span>
                    </button>
                    <button type="button"
                            class="tb-btn tb-btn--ghost"
                            @onclick="ExportAsJson"
                            disabled="@(ChatStateService.Messages.Count == 0)"
                            style="flex: 1;">
                        <TbIcon Icon="code" Size="sm" />
                        <span>JSON</span>
                    </button>
                </div>
            </div>
        </div>
    </div>
</div>

@code {
    private string userInput = string.Empty;
    private bool isRefreshing;
    private bool _disposed;
    private bool isResetting;
    private SessionStatsComponent? sessionStatsRef;
    private ElementReference _messagesContainer;
    private string selectedModel = "gpt-5-mini";
    private bool _showSettings = false;

    // Async tracking
    private readonly CancellationTokenSource _componentCts = new();
    private readonly DisposalGuard _disposalGuard = new();
    private Task? _statsRefreshTask;

    // Typewriter
    private bool typewriterEnabled
    {
        get => _typewriterEnabled;
        set
        {
            if (_typewriterEnabled == value)
                return;

            _typewriterEnabled = value;
            Logger.LogInformation("Typewriter effect toggled: {Enabled}", value);
        }
    }

    private bool _typewriterEnabled = true;

    // User Profile
    private UserProfile userProfile = new();

    // File attachment support
    private InputFile? fileInputRef;
    private List<FileAttachment> selectedFiles = new();
    private const int MaxFileSizeMB = 10;

    // GPT-5 specific settings
    private string reasoningEffort = "minimal";
    private string verbosity = "medium";
    private bool isGpt5Selected => selectedModel?.StartsWith("gpt-5") ?? false;
    private const int MaxFiles = 5;

    private readonly string[] examplePrompts = new[]
    {
        "Help me build a daily blend for focus and sustained energy.",
        "I'm training for a half marathon and need recovery support.",
        "Create a vegan-friendly stack that improves sleep quality.",
    };

    private readonly List<ModelOption> availableModels = new()
    {
        new ModelOption
        {
            Id = "gpt-5-mini",
            DisplayName = "GPT-5 Mini",
            ModelId = "gpt-5-mini",
            Description = "Balanced reasoning & cost (default)"
        },
        new ModelOption
        {
            Id = "gpt-5",
            DisplayName = "GPT-5",
            ModelId = "gpt-5",
            Description = "Most capable reasoning model"
        },
        new ModelOption
        {
            Id = "gpt-5-nano",
            DisplayName = "GPT-5 Nano",
            ModelId = "gpt-5-nano",
            Description = "Ultra-fast responses"
        }
    };

    protected override void OnInitialized()
    {
        ChatStateService.OnStateChanged += HandleStateChanged;
    }

    private void HandleStateChanged(object? sender, EventArgs e)
    {
        InvokeAsync(async () =>
        {
            try
            {
                if (_disposalGuard.IsDisposed) return;

                if (_disposalGuard.IsDisposed) return;

                StateHasChanged();
                await ScrollToBottomAsync();
            }
            catch (Exception ex)
            {
                Logger.LogError(ex, "HandleStateChanged failed");
            }
        });
    }

    private async Task SendMessage()
    {
        if (string.IsNullOrWhiteSpace(userInput) || ChatStateService.IsLoading)
            return;

        var message = userInput.Trim();
        userInput = string.Empty;

        // Profile enrichment
        if (userProfile.HasAnyData())
        {
            message = $"{message}{userProfile.ToContextString()}";
            Logger.LogInformation("Appending profile context to message");
        }

        // Send message with attachments (if any)
        var attachments = selectedFiles.Count > 0 ? new List<FileAttachment>(selectedFiles) : null;

        Logger.LogInformation("Sending chat message: {MessagePreview}... with {AttachmentCount} attachments",
            message.Substring(0, Math.Min(50, message.Length)),
            attachments?.Count ?? 0);

        await ChatStateService.SendMessageAsync(
            message,
            attachments,
            reasoningEffort: isGpt5Selected ? reasoningEffort : null,
            verbosity: isGpt5Selected ? verbosity : null
        );

        // Clear attachments after sending
        selectedFiles.Clear();
        // Note: InputFile doesn't need explicit clearing

        await ScrollToBottomAsync();
    }

    private async Task OnFilesChanged(InputFileChangeEventArgs e)
    {
        try
        {
            Logger.LogInformation("File upload initiated with {FileCount} file(s)", e.FileCount);

            if (selectedFiles.Count >= MaxFiles)
            {
                Logger.LogWarning("Maximum {MaxFiles} files already selected", MaxFiles);
                return;
            }

            foreach (var browserFile in e.GetMultipleFiles(MaxFiles))
            {
                if (selectedFiles.Count >= MaxFiles)
                {
                    Logger.LogWarning("Reached maximum {MaxFiles} files, skipping remaining uploads", MaxFiles);
                    break;
                }

                if (browserFile.Size > MaxFileSizeMB * 1024 * 1024)
                {
                    Logger.LogWarning("File {FileName} exceeds {MaxSize}MB limit", browserFile.Name, MaxFileSizeMB);
                    continue;
                }

                Logger.LogInformation("Reading file: {FileName} ({FileSize} bytes)", browserFile.Name, browserFile.Size);

                using var stream = browserFile.OpenReadStream(MaxFileSizeMB * 1024 * 1024);
                using var ms = new MemoryStream();
                await stream.CopyToAsync(ms);
                var base64Data = Convert.ToBase64String(ms.ToArray());

                var fileAttachment = new FileAttachment
                {
                    FileName = browserFile.Name,
                    Base64Data = base64Data,
                    MimeType = browserFile.ContentType,
                    FileSize = (int)browserFile.Size
                };

                Logger.LogInformation("Added file: {FileName} ({FormattedSize}), MIME: {MimeType}",
                    fileAttachment.FileName, fileAttachment.FormattedSize, fileAttachment.MimeType);

                selectedFiles.Add(fileAttachment);
            }

            Logger.LogInformation("Total files selected: {FileCount}", selectedFiles.Count);

            if (!_disposed)
                StateHasChanged();
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "File selection error");
        }
    }

    private async Task RemoveFile(FileAttachment file)
    {
        selectedFiles.Remove(file);
        Logger.LogInformation("Removed file: {FileName}", file.FileName);

        if (!_disposed)
            StateHasChanged();
    }

    private void OpenFilePicker()
    {
        // Use JS interop to trigger file picker
        try
        {
            _ = JS.InvokeVoidAsync("triggerFileInput");
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Failed to open file picker");
        }
    }

    private async Task SendExampleMessage(string example)
    {
        userInput = example;
        await SendMessage();
    }

    private async Task HandleKeyPress(KeyboardEventArgs e)
    {
        if (e.Key == "Enter" && !e.ShiftKey)
        {
            await SendMessage();
        }
    }

    private async Task RefreshStats()
    {
        if (sessionStatsRef == null || isRefreshing)
            return;

        isRefreshing = true;
        try
        {
            await sessionStatsRef.RefreshStats();
        }
        finally
        {
            isRefreshing = false;
            StateHasChanged();
        }
    }

    private async Task ResetConversation()
    {
        if (isResetting)
            return;

        isResetting = true;
        try
        {
            ChatStateService.Clear();
            SessionService.Reset();

            var resetSucceeded = await ChatService.ResetSessionAsync();

            if (!resetSucceeded)
            {
                Logger.LogWarning("Backend session reset failed for session {SessionId}", SessionService.SessionId);
                // Note: Could show a TbAlert here if needed, for now just log
            }
            else
            {
                Logger.LogInformation("Session reset successful for session {SessionId}", SessionService.SessionId);
            }

            await RefreshStats();
        }
        finally
        {
            isResetting = false;
            await ScrollToBottomAsync();
        }
    }

    private async Task HandleProfileChanged(UserProfile profile)
    {
        userProfile = profile;
        Logger.LogInformation("User profile updated: has data = {HasData}", profile.HasAnyData());
        StateHasChanged();
        await Task.CompletedTask;
    }

    private void ToggleSettings()
    {
        _showSettings = !_showSettings;
    }

    private void CloseSettings()
    {
        _showSettings = false;
    }

    private async Task OnModelChanged(string newModel)
    {
        if (selectedModel == newModel)
            return;

        selectedModel = newModel;
        SessionService.SetModel(newModel);

        if (newModel?.StartsWith("gpt-5") == true)
        {
            reasoningEffort = "minimal";
            verbosity = "medium";
        }

        await ResetConversation();
    }

    private async Task ScrollToBottomAsync()
    {
        try
        {
            await JS.InvokeVoidAsync("scrollToBottom", _messagesContainer);
        }
        catch (JSDisconnectedException ex)
        {
            Logger.LogError(ex, "SignalR circuit disconnected during scroll. User has lost connection.");
        }
        catch (JSException ex)
        {
            Logger.LogWarning(ex, "JavaScript scroll function failed: {Message}", ex.Message);
        }
        catch (ObjectDisposedException)
        {
            // Component disposed during scroll - expected during navigation
        }
        catch (Exception ex)
        {
            Logger.LogWarning(ex, "Unexpected error during scroll operation");
        }
    }

    private async Task ExportAsMarkdown()
    {
        var markdown = "# TailorBlend Consultation\n\n";
        markdown += $"**Session ID:** {SessionService.SessionId}\n";
        markdown += $"**Date:** {DateTime.Now:yyyy-MM-dd HH:mm:ss}\n";
        markdown += $"**Model:** {selectedModel}\n\n";
        markdown += "---\n\n";

        foreach (var message in ChatStateService.Messages)
        {
            var role = message.Role == "user" ? "You" : "TailorBlend AI";
            markdown += $"### {role} ({message.Timestamp:HH:mm})\n\n";
            markdown += $"{message.Content}\n\n";
        }

        await DownloadFile("tailorblend-consultation.md", markdown, "text/markdown");
    }

    private async Task ExportAsJson()
    {
        var export = new
        {
            SessionId = SessionService.SessionId,
            ExportDate = DateTime.Now,
            Model = selectedModel,
            Messages = ChatStateService.Messages.Select(m => new
            {
                m.Role,
                m.Content,
                m.Timestamp
            })
        };

        var json = System.Text.Json.JsonSerializer.Serialize(export, new System.Text.Json.JsonSerializerOptions
        {
            WriteIndented = true
        });

        await DownloadFile("tailorblend-consultation.json", json, "application/json");
    }

    private async Task DownloadFile(string filename, string content, string contentType)
    {
        var bytes = System.Text.Encoding.UTF8.GetBytes(content);
        var base64 = Convert.ToBase64String(bytes);
        await JS.InvokeVoidAsync("downloadFile", filename, base64, contentType);
    }

    public async ValueTask DisposeAsync()
    {
        if (_disposed)
            return;

        _disposed = true;

        Logger.LogInformation("Disposing Chat component");

        _componentCts.Cancel();

        if (_statsRefreshTask != null && !_statsRefreshTask.IsCompleted)
        {
            try
            {
                await Task.WhenAny(_statsRefreshTask, Task.Delay(1000));
            }
            catch
            {
                // Ignore exceptions during cleanup
            }
        }

        ChatStateService.OnStateChanged -= HandleStateChanged;

        await _disposalGuard.DisposeAsync();
        _componentCts.Dispose();

        if (ChatStateService is IAsyncDisposable asyncDisposable)
        {
            await asyncDisposable.DisposeAsync();
        }
    }
}

<script>
    function scrollToBottom(element) {
        if (element) {
            element.scrollTop = element.scrollHeight;
        }
    }

    function copyCode(elementId) {
        const codeElement = document.getElementById(elementId);
        if (!codeElement) return;

        const code = codeElement.textContent;
        navigator.clipboard.writeText(code).then(() => {
            const codeBlock = codeElement.closest('.tb-code-block');
            const copyBtn = codeBlock?.querySelector('.tb-code-copy');
            if (copyBtn) {
                const originalText = copyBtn.innerHTML;
                copyBtn.classList.add('copied');
                copyBtn.innerHTML = 'Copied!';

                setTimeout(() => {
                    copyBtn.classList.remove('copied');
                    copyBtn.innerHTML = originalText;
                }, 2000);
            }
        }).catch(err => {
            console.error('Failed to copy code:', err);
        });
    }

    function downloadFile(filename, base64Content, contentType) {
        const byteCharacters = atob(base64Content);
        const byteNumbers = new Array(byteCharacters.length);
        for (let i = 0; i < byteCharacters.length; i++) {
            byteNumbers[i] = byteCharacters.charCodeAt(i);
        }
        const byteArray = new Uint8Array(byteNumbers);
        const blob = new Blob([byteArray], { type: contentType });
        const url = URL.createObjectURL(blob);

        const link = document.createElement('a');
        link.href = url;
        link.download = filename;
        document.body.appendChild(link);
        link.click();
        document.body.removeChild(link);
        URL.revokeObjectURL(url);
    }
</script>
