@page "/chat"
@using BlazorConsultant.Models
@using BlazorConsultant.Components
@using BlazorConsultant.Helpers
@using Microsoft.AspNetCore.Components.Forms
@inject IChatService ChatService
@inject IChatStateService ChatStateService
@inject ISessionService SessionService
@inject IJSRuntime JS
@inject ILogger<Chat> Logger
@inject MudBlazor.ISnackbar Snackbar
@implements IAsyncDisposable

<PageTitle>Chat - TailorBlend AI Consultant</PageTitle>

<div class="tb-conversation">
    <section class="tb-conversation__messages" id="messagesContainer" @ref="_messagesContainer">
        <header class="tb-stack" style="gap: var(--tb-space-sm);">
            <MudText Typo="Typo.overline" Class="tb-muted">Consultation</MudText>
            <MudText Typo="Typo.h5" Style="font-weight:700;">Personalized supplement planning</MudText>
            <MudText Typo="Typo.body2" Class="tb-muted">
                Share your goals, lifestyle, and preferences. TailorBlend will respond with targeted guidance in real time.
            </MudText>
        </header>

        <div class="tb-quick-actions">
            @foreach (var example in examplePrompts)
            {
                <button type="button" class="tb-quick-action" @onclick="() => SendExampleMessage(example)">
                    @example
                </button>
            }
        </div>

        <!-- ✅ USER PROFILE: Optional pre-fillable fields for context enrichment -->
        <UserProfileComponent Profile="@userProfile" OnProfileChanged="HandleProfileChanged" />

        @if (ChatStateService.Messages.Count == 0 && !ChatStateService.IsLoading)
        {
            <div class="tb-card tb-card--flat tb-empty-state">
                <div class="tb-empty-state__icon">
                    <MudIcon Icon="@Icons.Material.Filled.LocalFlorist" Color="Color.Success" Style="font-size:4rem; opacity: 0.2;" />
                </div>
                <MudText Typo="Typo.h4" Style="font-weight:700; margin-top: 1rem;">
                    Ready to create your perfect blend?
                </MudText>
                <MudText Typo="Typo.body1" Class="tb-muted" Style="max-width: 480px; margin: 0 auto;">
                    Tell me about your health goals, lifestyle, and any dietary preferences.
                    I'll guide you through a personalized consultation to design your ideal supplement stack.
                </MudText>
                <div class="tb-pill-list" style="justify-content: center;">
                    <span class="tb-chip tb-chip--highlight">
                        <MudIcon Icon="@Icons.Material.Filled.FitnessCenter" Size="Size.Small" />
                        Fitness & Performance
                    </span>
                    <span class="tb-chip tb-chip--highlight">
                        <MudIcon Icon="@Icons.Material.Filled.SelfImprovement" Size="Size.Small" />
                        Stress & Sleep
                    </span>
                    <span class="tb-chip tb-chip--highlight">
                        <MudIcon Icon="@Icons.Material.Filled.Restaurant" Size="Size.Small" />
                        Nutrition Gaps
                    </span>
                </div>
            </div>
        }
        else
        {
            <div class="tb-stack" style="gap: var(--tb-space);">
                @foreach (var msg in ChatStateService.Messages)
                {
                    <div style="position: relative;">
                        @* ✅ PROFILE BADGE: Show indicator when message includes profile context *@
                        @if (msg.Role == "user" && msg.Content.Contains("[Profile Context]"))
                        {
                            <div class="tb-profile-badge">
                                <MudIcon Icon="@Icons.Material.Filled.Assignment" Size="Size.Small" />
                                Profile included
                            </div>
                        }
                        <ChatMessageComponent
                            Message="@msg"
                            TypewriterEnabled="@typewriterEnabled"
                            @key="@($"{msg.Timestamp.Ticks}_{msg.Role}")" />
                    </div>
                }
            </div>
        }
        <div class="tb-input-bar">
            <!-- File Preview Component -->
            @if (selectedFiles.Count > 0)
            {
                <FilePreviewComponent Attachments="@selectedFiles"
                                     ShowRemoveButton="true"
                                     OnRemoveClick="@RemoveFile" />
            }

            <div style="position: relative; display: flex; align-items: flex-end; gap: 0.5rem;">
                <!-- MudBlazor file upload (hidden input) -->
                <MudFileUpload T="IReadOnlyList<IBrowserFile>"
                               @ref="fileUpload"
                               OnFilesChanged="OnFilesChanged"
                               Hidden="true"
                               MaximumFileCount="@MaxFiles"
                               Accept=".pdf,.jpg,.jpeg,.png,.gif,.txt,.csv,.xlsx,.docx" />

                <!-- Attach button -->
                <button type="button"
                        class="tb-attach-btn"
                        @onclick="async () => await fileUpload.OpenFilePickerAsync()"
                        disabled="@ChatStateService.IsLoading"
                        title="Attach files (max 10MB per file)">
                    <MudIcon Icon="@Icons.Material.Filled.AttachFile" />
                </button>

                <div style="position: relative; flex: 1;">
                    <textarea class="tb-input"
                              @bind="userInput"
                              @bind:event="oninput"
                              placeholder="Type your message... (Enter to send, Shift+Enter for new line)"
                              @onkeydown="HandleKeyPress"
                              disabled="@ChatStateService.IsLoading"></textarea>

                    <button type="button"
                            class="tb-send-btn"
                            @onclick="SendMessage"
                            disabled="@ChatStateService.IsLoading">
                        <MudIcon Icon="@Icons.Material.Filled.Send" />
                    </button>
                </div>
            </div>

            @if (ChatStateService.IsLoading)
            {
                <div class="tb-typing-indicator" style="margin-top: 12px;">
                    <div class="tb-typing-avatar">
                        <MudIcon Icon="@Icons.Material.Filled.LocalFlorist" Size="Size.Small" />
                    </div>
                    <div class="tb-typing-content">
                        <div class="tb-typing-text">TailorBlend is thinking...</div>
                        <div class="tb-typing-dots">
                            <span></span>
                            <span></span>
                            <span></span>
                        </div>
                    </div>
                </div>
            }
        </div>

        @if (showScrollButton)
        {
            <button class="tb-scroll-fab" @onclick="ScrollToBottom" aria-label="Scroll to bottom">
                <MudIcon Icon="@Icons.Material.Filled.KeyboardArrowDown" />
                @if (hasNewMessages)
                {
                    <span class="tb-scroll-badge">New</span>
                }
            </button>
        }
    </section>

    <aside class="tb-stats-panel @(isStatsExpanded ? "expanded" : "")">
        <div class="tb-card tb-card--flat" style="margin-bottom: var(--tb-space);">
            <MudText Typo="Typo.overline" Class="tb-muted">AI Model</MudText>
            <MudText Typo="Typo.h6" Style="font-weight:700; margin-bottom: var(--tb-space-sm);">Select Model</MudText>

            <MudSelect T="string"
                       Value="@selectedModel"
                       ValueChanged="@OnModelChanged"
                       Variant="Variant.Text"
                       Dense="true"
                       FullWidth="true"
                       Class="tb-model-select">
                @foreach (var model in availableModels)
                {
                    <MudSelectItem T="string" Value="@model.ModelId">
                        <div>
                            <MudText Typo="Typo.body2" Style="font-weight: 600;">@model.DisplayName</MudText>
                            @if (!string.IsNullOrEmpty(model.Description))
                            {
                                <MudText Typo="Typo.caption" Class="tb-muted">@model.Description</MudText>
                            }
                        </div>
                    </MudSelectItem>
                }
            </MudSelect>
        </div>

        <div class="tb-card tb-card--flat" style="margin-bottom: var(--tb-space);">
            <MudText Typo="Typo.overline" Class="tb-muted">Display Options</MudText>

            <MudCheckBox
                T="bool"
                @bind-Checked="typewriterEnabled"
                Label="Typewriter effect"
                Color="Color.Primary"
                Dense="true" />

            <MudText Typo="Typo.caption" Class="tb-muted" Style="margin-top: 0.25rem;">
                Gradually reveal AI responses (applies to new messages)
            </MudText>
        </div>

        @if (isGpt5Selected)
        {
            <div class="tb-card tb-card--flat" style="margin-bottom: var(--tb-space);">
                <MudText Typo="Typo.overline" Class="tb-muted">GPT-5 Settings</MudText>

                <MudText Typo="Typo.body2" Style="margin-top: 0.5rem; font-weight: 600;">Reasoning Effort</MudText>
                <MudRadioGroup T="string" @bind-Value="@reasoningEffort">
                    <MudRadio T="string" Value="@("minimal")" Color="Color.Primary">Minimal (fastest)</MudRadio>
                    <MudRadio T="string" Value="@("low")" Color="Color.Primary">Low</MudRadio>
                    <MudRadio T="string" Value="@("medium")" Color="Color.Primary">Medium (balanced)</MudRadio>
                    <MudRadio T="string" Value="@("high")" Color="Color.Primary">High (thorough)</MudRadio>
                </MudRadioGroup>

                <MudText Typo="Typo.body2" Style="margin-top: 1rem; font-weight: 600;">Response Style</MudText>
                <MudSelect T="string" Value="@verbosity" ValueChanged="@((string val) => verbosity = val)" Variant="Variant.Outlined" Dense="true" Style="margin-top: 0.25rem;">
                    <MudSelectItem T="string" Value="@("low")">Concise</MudSelectItem>
                    <MudSelectItem T="string" Value="@("medium")">Balanced</MudSelectItem>
                    <MudSelectItem T="string" Value="@("high")">Detailed</MudSelectItem>
                </MudSelect>
            </div>
        }

        <div class="tb-card tb-card--flat">
            <div style="display: flex; justify-content: space-between; align-items: center; cursor: pointer;" @onclick="ToggleStatsPanel">
                <div>
                    <MudText Typo="Typo.overline" Class="tb-muted">Session snapshot</MudText>
                    <MudText Typo="Typo.h6" Style="font-weight:700;">Usage overview</MudText>
                </div>
                <MudIconButton Icon="@(isStatsExpanded ? Icons.Material.Filled.ExpandLess : Icons.Material.Filled.ExpandMore)"
                               Color="Color.Default"
                               Size="Size.Small" />
            </div>

            @if (isStatsExpanded)
            {
                <div class="tb-divider"></div>

                <SessionStatsComponent @ref="sessionStatsRef" SessionId="@SessionService.SessionId" />

                <div class="tb-divider"></div>

                <div class="tb-stack tb-stack--row" style="justify-content: space-between;">
                    <button type="button"
                            class="tb-button tb-button--secondary"
                            @onclick="RefreshStats"
                            @onclick:stopPropagation="true"
                            disabled="@isRefreshing">
                        @if (isRefreshing)
                        {
                            <MudProgressCircular Size="Size.Small" Indeterminate="true" Style="color: var(--tb-gray-600);" />
                            <span>Refreshing</span>
                        }
                        else
                        {
                            <MudIcon Icon="@Icons.Material.Filled.Refresh" />
                            <span>Refresh</span>
                        }
                    </button>

                    <button type="button"
                            class="tb-button tb-button--primary"
                            @onclick="ResetConversation"
                            @onclick:stopPropagation="true"
                            disabled="@isResetting">
                        @if (isResetting)
                        {
                            <MudProgressCircular Size="Size.Small" Indeterminate="true" Style="color: white;" />
                            <span>Resetting</span>
                        }
                        else
                        {
                            <MudIcon Icon="@Icons.Material.Filled.RestartAlt" />
                            <span>Reset session</span>
                        }
                    </button>
                </div>

                <div class="tb-divider"></div>

                <div class="tb-stack">
                    <MudText Typo="Typo.overline" Class="tb-muted">Export conversation</MudText>
                    <div class="tb-stack tb-stack--row" style="gap: 0.5rem;">
                        <button type="button"
                                class="tb-button tb-button--secondary"
                                @onclick="ExportAsMarkdown"
                                @onclick:stopPropagation="true"
                                style="flex: 1;"
                                disabled="@(ChatStateService.Messages.Count == 0)">
                            <MudIcon Icon="@Icons.Material.Filled.Description" Size="Size.Small" />
                            <span>Markdown</span>
                        </button>
                        <button type="button"
                                class="tb-button tb-button--secondary"
                                @onclick="ExportAsJson"
                                @onclick:stopPropagation="true"
                                style="flex: 1;"
                                disabled="@(ChatStateService.Messages.Count == 0)">
                            <MudIcon Icon="@Icons.Material.Filled.Code" Size="Size.Small" />
                            <span>JSON</span>
                        </button>
                    </div>
                </div>
            }
        </div>
    </aside>
</div>

@code {
    private string userInput = string.Empty;
    private bool isRefreshing;
    private bool _disposed;
    private bool isResetting;
    private bool isStatsExpanded = false;
    private SessionStatsComponent? sessionStatsRef;
    private ElementReference _messagesContainer;
    private string selectedModel = "gpt-4.1-mini-2025-04-14";
    private bool showScrollButton = false;
    private bool hasNewMessages = false;
    // ✅ PERFORMANCE: Throttle scroll to prevent excessive JS interop
    private DateTime _lastScrollTime = DateTime.MinValue;
    private const int SCROLL_THROTTLE_MS = 150;
    private int _previousMessageCount = 0;

    // ✅ ASYNC: Component-level cancellation and disposal tracking
    private readonly CancellationTokenSource _componentCts = new();
    private readonly DisposalGuard _disposalGuard = new();
    private Task? _statsRefreshTask;

    // ✅ TYPEWRITER: User preference for typewriter effect (applies to new messages)
    private bool typewriterEnabled
    {
        get => _typewriterEnabled;
        set
        {
            if (_typewriterEnabled == value)
                return;

            _typewriterEnabled = value;
            Logger.LogInformation("Typewriter effect toggled: {Enabled}", value);
        }
    }

    private bool _typewriterEnabled = true;

    // ✅ USER PROFILE: Optional pre-fillable fields for context enrichment
    private UserProfile userProfile = new();

    // File attachment support
    private MudFileUpload<IReadOnlyList<IBrowserFile>>? fileUpload;
    private List<FileAttachment> selectedFiles = new();
    private const int MaxFileSizeMB = 10;

    // GPT-5 specific settings
    private string reasoningEffort = "minimal";
    private string verbosity = "medium";
    private bool isGpt5Selected => selectedModel?.StartsWith("gpt-5") ?? false;
    private const int MaxFiles = 5;

    private readonly string[] examplePrompts = new[]
    {
        "Help me build a daily blend for focus and sustained energy.",
        "I'm training for a half marathon and need recovery support.",
        "Create a vegan-friendly stack that improves sleep quality.",
    };

    private readonly List<ModelOption> availableModels = new()
    {
        new ModelOption
        {
            Id = "gpt-4o",
            DisplayName = "GPT-4o",
            ModelId = "chatgpt-4o-latest",
            Description = "Best Chat Model (default)"
        },
        new ModelOption
        {
            Id = "gpt-4.1-mini",
            DisplayName = "GPT-4.1 Mini",
            ModelId = "gpt-4.1-mini-2025-04-14",
            Description = "Fast and cost-effective"
        },
        new ModelOption
        {
            Id = "gpt-5",
            DisplayName = "GPT-5",
            ModelId = "gpt-5",
            Description = "Most capable reasoning model"
        },
        new ModelOption
        {
            Id = "gpt-5-mini",
            DisplayName = "GPT-5 Mini",
            ModelId = "gpt-5-mini",
            Description = "Balanced reasoning & cost"
        },
        new ModelOption
        {
            Id = "gpt-5-nano",
            DisplayName = "GPT-5 Nano",
            ModelId = "gpt-5-nano",
            Description = "Ultra-fast responses"
        }
    };

    protected override void OnInitialized()
    {
        ChatStateService.OnStateChanged += HandleStateChanged;
    }

    private void HandleStateChanged(object? sender, EventArgs e)
    {
        InvokeAsync(async () =>
        {
            try
            {
                if (_disposalGuard.IsDisposed) return;

                // Detect new messages
                if (ChatStateService.Messages.Count > _previousMessageCount)
                {
                    hasNewMessages = true;
                    showScrollButton = true;
                    _previousMessageCount = ChatStateService.Messages.Count;

                    // Refresh stats after new message (tracked and cancellable)
                    _statsRefreshTask = RefreshStatsAfterDelayAsync();
                }

                if (_disposalGuard.IsDisposed) return;

                StateHasChanged();
                await ScrollToBottomAsync();
            }
            catch (Exception ex)
            {
                Logger.LogError(ex, "HandleStateChanged failed");
            }
        });
    }

    private async Task SendMessage()
    {
        if (string.IsNullOrWhiteSpace(userInput) || ChatStateService.IsLoading)
            return;

        var message = userInput.Trim();
        userInput = string.Empty;

        // ✅ PROFILE ENRICHMENT: Append profile context if any fields are filled
        if (userProfile.HasAnyData())
        {
            message = $"{message}{userProfile.ToContextString()}";
            Logger.LogInformation("Appending profile context to message");
        }

        // Send message with attachments (if any)
        var attachments = selectedFiles.Count > 0 ? new List<FileAttachment>(selectedFiles) : null;

        Logger.LogInformation("Sending chat message: {MessagePreview}... with {AttachmentCount} attachments",
            message.Substring(0, Math.Min(50, message.Length)),
            attachments?.Count ?? 0);

        if (attachments != null && Logger.IsEnabled(LogLevel.Debug))
        {
            foreach (var att in attachments)
            {
                Logger.LogDebug("Attachment: {FileName} ({FileSize} bytes, base64: {Base64Length} chars)",
                    att.FileName, att.FileSize, att.Base64Data?.Length ?? 0);
            }
        }

        await ChatStateService.SendMessageAsync(
            message,
            attachments,
            reasoningEffort: isGpt5Selected ? reasoningEffort : null,
            verbosity: isGpt5Selected ? verbosity : null
        );

        // Clear attachments after sending
        selectedFiles.Clear();
        if (fileUpload != null)
            await fileUpload.ClearAsync();

        await ScrollToBottomAsync();
    }

    private async Task OnFilesChanged(InputFileChangeEventArgs e)
    {
        try
        {
            Logger.LogInformation("File upload initiated with {FileCount} file(s)", e.FileCount);

            // Check if we've reached max files
            if (selectedFiles.Count >= MaxFiles)
            {
                Logger.LogWarning("Maximum {MaxFiles} files already selected", MaxFiles);
                return;
            }

            // Process each file
            foreach (var browserFile in e.GetMultipleFiles(MaxFiles))
            {
                if (selectedFiles.Count >= MaxFiles)
                {
                    Logger.LogWarning("Reached maximum {MaxFiles} files, skipping remaining uploads", MaxFiles);
                    break;
                }

                // Check file size
                if (browserFile.Size > MaxFileSizeMB * 1024 * 1024)
                {
                    Logger.LogWarning("File {FileName} exceeds {MaxSize}MB limit", browserFile.Name, MaxFileSizeMB);
                    continue;
                }

                Logger.LogInformation("Reading file: {FileName} ({FileSize} bytes)", browserFile.Name, browserFile.Size);

                // Read file to base64
                using var stream = browserFile.OpenReadStream(MaxFileSizeMB * 1024 * 1024);
                using var ms = new MemoryStream();
                await stream.CopyToAsync(ms);
                var base64Data = Convert.ToBase64String(ms.ToArray());

                var fileAttachment = new FileAttachment
                {
                    FileName = browserFile.Name,
                    Base64Data = base64Data,
                    MimeType = browserFile.ContentType,
                    FileSize = (int)browserFile.Size
                };

                Logger.LogInformation("Added file: {FileName} ({FormattedSize}), MIME: {MimeType}, Base64 length: {Base64Length} chars",
                    fileAttachment.FileName, fileAttachment.FormattedSize, fileAttachment.MimeType, base64Data.Length);

                selectedFiles.Add(fileAttachment);
            }

            Logger.LogInformation("Total files selected: {FileCount}", selectedFiles.Count);

            if (!_disposed)
                StateHasChanged();
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "File selection error");
        }
    }

    private async Task RemoveFile(FileAttachment file)
    {
        selectedFiles.Remove(file);
        Logger.LogInformation("Removed file: {FileName}", file.FileName);

        // Clear MudFileUpload if no files left
        if (selectedFiles.Count == 0 && fileUpload != null)
        {
            await fileUpload.ClearAsync();
        }

        if (!_disposed)
            StateHasChanged();
    }

    private async Task SendExampleMessage(string example)
    {
        userInput = example;
        await SendMessage();
    }

    private async Task HandleKeyPress(KeyboardEventArgs e)
    {
        if (e.Key == "Enter" && !e.ShiftKey)
        {
            await SendMessage();
        }
    }

    private async Task RefreshStats()
    {
        if (sessionStatsRef == null || isRefreshing)
            return;

        isRefreshing = true;
        try
        {
            await sessionStatsRef.RefreshStats();
        }
        finally
        {
            isRefreshing = false;
            StateHasChanged();
        }
    }

    private async Task ResetConversation()
    {
        if (isResetting)
            return;

        isResetting = true;
        try
        {
            ChatStateService.Clear();
            SessionService.Reset();

            // Attempt to reset backend session
            var resetSucceeded = await ChatService.ResetSessionAsync();

            if (!resetSucceeded)
            {
                // Backend reset failed - warn user but keep local state cleared
                Logger.LogWarning("Backend session reset failed for session {SessionId}", SessionService.SessionId);
                Snackbar.Add(
                    "⚠️ Session reset partially failed. Local conversation cleared, but backend may still have history.",
                    MudBlazor.Severity.Warning,
                    config => config.VisibleStateDuration = 5000);
            }
            else
            {
                Logger.LogInformation("Session reset successful for session {SessionId}", SessionService.SessionId);
            }

            await RefreshStats();
        }
        finally
        {
            isResetting = false;
            await ScrollToBottomAsync();
        }
    }

    private async Task HandleProfileChanged(UserProfile profile)
    {
        userProfile = profile;
        Logger.LogInformation("User profile updated: has data = {HasData}", profile.HasAnyData());
        StateHasChanged();
        await Task.CompletedTask;
    }

    private void ToggleStatsPanel()
    {
        isStatsExpanded = !isStatsExpanded;
    }

    private async Task OnModelChanged(string newModel)
    {
        if (selectedModel == newModel)
            return;

        selectedModel = newModel;
        SessionService.SetModel(newModel);

        // Reset GPT-5 settings to defaults when switching models
        if (newModel?.StartsWith("gpt-5") == true)
        {
            reasoningEffort = "minimal";
            verbosity = "medium";
        }

        // Reset session to apply new model
        await ResetConversation();
    }

    private async Task ScrollToBottom()
    {
        hasNewMessages = false;
        showScrollButton = false;
        await ScrollToBottomAsync();
    }

    private async Task ScrollToBottomAsync()
    {
        try
        {
            // ✅ PERFORMANCE: Throttle scroll calls - skip if called within 150ms
            // Reduces JS interop overhead from 50/sec to ~7/sec (87% reduction)
            var elapsed = (DateTime.Now - _lastScrollTime).TotalMilliseconds;
            if (elapsed < SCROLL_THROTTLE_MS)
                return; // Skip - too soon since last scroll

            _lastScrollTime = DateTime.Now;
            await JS.InvokeVoidAsync("scrollToBottom", _messagesContainer);
        }
        catch (JSDisconnectedException ex)
        {
            // SignalR circuit lost - this is critical for user experience
            Logger.LogError(ex, "SignalR circuit disconnected during scroll. User has lost connection.");
            // Circuit disconnection means user needs to refresh - this is a critical error
        }
        catch (JSException ex)
        {
            // JavaScript error - log for debugging but don't fail the component
            Logger.LogWarning(ex, "JavaScript scroll function failed: {Message}", ex.Message);
        }
        catch (ObjectDisposedException)
        {
            // Component disposed during scroll - expected during navigation, no logging needed
        }
        catch (Exception ex)
        {
            // Unexpected error - log it for diagnostics
            Logger.LogWarning(ex, "Unexpected error during scroll operation");
        }
    }

    private async Task ExportAsMarkdown()
    {
        var markdown = "# TailorBlend Consultation\n\n";
        markdown += $"**Session ID:** {SessionService.SessionId}\n";
        markdown += $"**Date:** {DateTime.Now:yyyy-MM-dd HH:mm:ss}\n";
        markdown += $"**Model:** {selectedModel}\n\n";
        markdown += "---\n\n";

        foreach (var message in ChatStateService.Messages)
        {
            var role = message.Role == "user" ? "You" : "TailorBlend AI";
            markdown += $"### {role} ({message.Timestamp:HH:mm})\n\n";
            markdown += $"{message.Content}\n\n";
        }

        await DownloadFile("tailorblend-consultation.md", markdown, "text/markdown");
    }

    private async Task ExportAsJson()
    {
        var export = new
        {
            SessionId = SessionService.SessionId,
            ExportDate = DateTime.Now,
            Model = selectedModel,
            Messages = ChatStateService.Messages.Select(m => new
            {
                m.Role,
                m.Content,
                m.Timestamp
            })
        };

        var json = System.Text.Json.JsonSerializer.Serialize(export, new System.Text.Json.JsonSerializerOptions
        {
            WriteIndented = true
        });

        await DownloadFile("tailorblend-consultation.json", json, "application/json");
    }

    private async Task DownloadFile(string filename, string content, string contentType)
    {
        var bytes = System.Text.Encoding.UTF8.GetBytes(content);
        var base64 = Convert.ToBase64String(bytes);
        await JS.InvokeVoidAsync("downloadFile", filename, base64, contentType);
    }

    /// <summary>
    /// Tracked async task for stats refresh with proper cancellation support.
    /// Replaces fire-and-forget Task.Run pattern.
    /// </summary>
    private async Task RefreshStatsAfterDelayAsync()
    {
        try
        {
            // Wait 500ms before refreshing (debounce rapid message updates)
            await Task.Delay(500, _componentCts.Token);

            // Execute stats refresh on UI thread with disposal guard
            await _disposalGuard.ExecuteIfNotDisposedAsync(async () =>
            {
                await InvokeAsync(async () =>
                {
                    if (sessionStatsRef != null)
                    {
                        await sessionStatsRef.RefreshStats();
                    }
                });
                return Task.CompletedTask;
            });
        }
        catch (OperationCanceledException)
        {
            // Expected when component is disposed - no logging needed
        }
        catch (Exception ex)
        {
            Logger.LogWarning(ex, "Stats refresh failed");
        }
    }

    public async ValueTask DisposeAsync()
    {
        if (_disposed)
            return;

        _disposed = true;

        Logger.LogInformation("Disposing Chat component");

        // Cancel any pending operations
        _componentCts.Cancel();

        // Wait for stats refresh task to complete (with timeout)
        if (_statsRefreshTask != null && !_statsRefreshTask.IsCompleted)
        {
            try
            {
                await Task.WhenAny(_statsRefreshTask, Task.Delay(1000));
            }
            catch
            {
                // Ignore exceptions during cleanup
            }
        }

        // Unsubscribe from events
        ChatStateService.OnStateChanged -= HandleStateChanged;

        // Dispose resources
        await _disposalGuard.DisposeAsync();
        _componentCts.Dispose();

        // Dispose ChatStateService if it implements IAsyncDisposable
        if (ChatStateService is IAsyncDisposable asyncDisposable)
        {
            await asyncDisposable.DisposeAsync();
        }
    }
}

<script>
    function copyCode(elementId) {
        const codeElement = document.getElementById(elementId);
        if (!codeElement) return;

        const code = codeElement.textContent;
        navigator.clipboard.writeText(code).then(() => {
            // Find the copy button and update its state
            const codeBlock = codeElement.closest('.tb-code-block');
            const copyBtn = codeBlock?.querySelector('.tb-code-copy');
            if (copyBtn) {
                const originalText = copyBtn.innerHTML;
                copyBtn.classList.add('copied');
                copyBtn.innerHTML = `<svg width='14' height='14' viewBox='0 0 24 24' fill='none' stroke='currentColor' stroke-width='2'>
                    <polyline points='20 6 9 17 4 12'></polyline>
                </svg>Copied!`;

                setTimeout(() => {
                    copyBtn.classList.remove('copied');
                    copyBtn.innerHTML = originalText;
                }, 2000);
            }
        }).catch(err => {
            console.error('Failed to copy code:', err);
        });
    }

    function downloadFile(filename, base64Content, contentType) {
        const byteCharacters = atob(base64Content);
        const byteNumbers = new Array(byteCharacters.length);
        for (let i = 0; i < byteCharacters.length; i++) {
            byteNumbers[i] = byteCharacters.charCodeAt(i);
        }
        const byteArray = new Uint8Array(byteNumbers);
        const blob = new Blob([byteArray], { type: contentType });
        const url = URL.createObjectURL(blob);

        const link = document.createElement('a');
        link.href = url;
        link.download = filename;
        document.body.appendChild(link);
        link.click();
        document.body.removeChild(link);
        URL.revokeObjectURL(url);
    }
</script>
