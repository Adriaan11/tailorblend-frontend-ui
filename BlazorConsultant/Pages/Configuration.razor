@page "/configuration"
@page "/prompts"
@inject IPromptManagementService PromptService
@inject NavigationManager NavManager

<PageTitle>System Prompts â€“ TailorBlend</PageTitle>

<section class="tb-section">
    <div class="tb-container">
        <!-- Header -->
        <div class="tb-section__header">
            <div class="flex items-center justify-between mb-6">
                <div>
                    <p class="tb-eyebrow">Prompt Management</p>
                    <h1 class="tb-section__title">System Prompts</h1>
                    <p class="tb-section__subtitle">
                        Create and manage different system prompts to test various AI behaviors.
                    </p>
                </div>
                <TbButton Variant="filled" Color="primary" StartIcon="plus" @onclick="ShowCreateDialog">
                    New Prompt
                </TbButton>
            </div>
        </div>

        <!-- Alert Messages -->
        @if (!string.IsNullOrEmpty(_errorMessage))
        {
            <TbAlert Severity="error" Title="Error" Message="@_errorMessage" Closeable="true" Icon="circle-xmark" />
        }
        @if (!string.IsNullOrEmpty(_successMessage))
        {
            <TbAlert Severity="success" Title="Success" Message="@_successMessage" Closeable="true" Icon="circle-check" />
        }

        <!-- Loading State -->
        @if (_isLoading)
        {
            <div class="flex justify-center items-center py-12">
                <TbLoadingSpinner Size="lg" />
            </div>
        }
        else
        {
            <!-- Prompts List -->
            <div class="space-y-4">
                @if (_prompts.Any())
                {
                    @foreach (var prompt in _prompts)
                    {
                        <div class="@GetPromptCardClass(prompt)">
                            <div class="flex items-start justify-between">
                                <div class="flex-1">
                                    <div class="flex items-center gap-3 mb-2">
                                        <h3 class="text-lg font-semibold text-text-primary">@prompt.Name</h3>
                                        @if (prompt.IsDefault)
                                        {
                                            <span class="tb-chip tb-chip--primary">
                                                <TbIcon Icon="star" Size="sm" />
                                                Default
                                            </span>
                                        }
                                        @if (!prompt.IsActive)
                                        {
                                            <span class="tb-chip tb-chip--muted">Inactive</span>
                                        }
                                    </div>

                                    @if (!string.IsNullOrEmpty(prompt.Description))
                                    {
                                        <p class="text-sm text-text-secondary mb-3">@prompt.Description</p>
                                    }

                                    <div class="tb-form-helper">
                                        @prompt.ContentPreview
                                    </div>

                                    <div class="flex items-center gap-4 mt-3 text-xs text-text-tertiary">
                                        <span>Created: @prompt.FormattedCreatedAt</span>
                                        <span>Modified: @prompt.FormattedUpdatedAt</span>
                                    </div>
                                </div>

                                <div class="flex gap-2 ml-4">
                                    @if (!prompt.IsDefault && prompt.IsActive)
                                    {
                                        <TbButton Variant="outlined" Color="default" Size="sm" StartIcon="star" @onclick="() => SetDefaultPrompt(prompt.Id)">
                                            Set Default
                                        </TbButton>
                                    }
                                    <TbButton Variant="outlined" Color="default" Size="sm" StartIcon="pen" @onclick="() => ShowEditDialog(prompt)">
                                        Edit
                                    </TbButton>
                                    @if (!prompt.IsDefault)
                                    {
                                        <TbButton Variant="outlined" Color="error" Size="sm" StartIcon="trash" @onclick="() => DeletePrompt(prompt.Id)">
                                            Delete
                                        </TbButton>
                                    }
                                </div>
                            </div>
                        </div>
                    }
                }
                else
                {
                    <div class="tb-panel text-center py-12">
                        <TbIcon Icon="file-lines" Size="xl" Color="muted" />
                        <h3 class="text-lg font-medium mt-4 mb-2">No prompts found</h3>
                        <p class="text-sm text-text-secondary mb-6">Create your first system prompt to get started.</p>
                        <TbButton Variant="filled" Color="primary" StartIcon="plus" @onclick="ShowCreateDialog">
                            Create Prompt
                        </TbButton>
                    </div>
                }
            </div>
        }
    </div>
</section>

<!-- Create/Edit Dialog -->
@if (_showDialog)
{
    <div class="tb-dialog-overlay" @onclick="CloseDialog">
        <div class="tb-dialog" @onclick:stopPropagation="true">
            <div class="tb-dialog__header">
                <h2 class="tb-dialog__title">@(_isEditing ? "Edit Prompt" : "Create New Prompt")</h2>
                <button type="button" class="tb-dialog__close" @onclick="CloseDialog">
                    <TbIcon Icon="xmark" Size="sm" />
                </button>
            </div>

            <div class="tb-dialog__content">
                <div class="space-y-4">
                    <div class="tb-form-group">
                        <label class="tb-form-label">Name</label>
                        <input type="text"
                               class="tb-form-input"
                               @bind="_formName"
                               @bind:event="oninput"
                               placeholder="e.g., Clinical Mode, Friendly Assistant" />
                        <div class="tb-form-helper">A descriptive name for this prompt (max 100 characters)</div>
                    </div>

                    <div class="tb-form-group">
                        <label class="tb-form-label">Description (Optional)</label>
                        <textarea class="tb-form-input"
                                  rows="2"
                                  @bind="_formDescription"
                                  @bind:event="oninput"
                                  placeholder="Brief description of what this prompt does..."></textarea>
                        <div class="tb-form-helper">Optional description (max 500 characters)</div>
                    </div>

                    <div class="tb-form-group">
                        <label class="tb-form-label">System Instructions</label>
                        <textarea class="tb-form-input"
                                  rows="12"
                                  @bind="_formContent"
                                  @bind:event="oninput"
                                  placeholder="Enter the system instructions here..."></textarea>
                        <div class="tb-form-helper">The actual prompt content (10-100,000 characters)</div>
                    </div>

                    <div class="flex items-center gap-4">
                        <TbCheckbox
                            Label="Active"
                            @bind-Checked="_formIsActive" />

                        @if (!_isEditing || !_editingPrompt.IsDefault)
                        {
                            <TbCheckbox
                                Label="Set as default"
                                @bind-Checked="_formIsDefault" />
                        }
                    </div>
                </div>
            </div>

            <div class="tb-dialog__footer">
                <TbButton Variant="outlined" Color="default" @onclick="CloseDialog">
                    Cancel
                </TbButton>
                <TbButton Variant="filled" Color="primary" @onclick="SavePrompt" Disabled="_isSaving">
                    @if (_isSaving)
                    {
                        <span>Saving...</span>
                    }
                    else
                    {
                        <span>@(_isEditing ? "Update" : "Create")</span>
                    }
                </TbButton>
            </div>
        </div>
    </div>
}

@code {
    private List<SystemPromptDto> _prompts = new();
    private bool _isLoading = true;
    private bool _showDialog = false;
    private bool _isEditing = false;
    private bool _isSaving = false;
    private SystemPromptDto _editingPrompt = new();
    private string? _errorMessage;
    private string? _successMessage;

    // Form fields (separate from _editingPrompt to ensure proper binding)
    private string _formName = string.Empty;
    private string? _formDescription;
    private string _formContent = string.Empty;
    private bool _formIsActive = true;
    private bool _formIsDefault = false;

    protected override async Task OnInitializedAsync()
    {
        await LoadPrompts();
    }

    private async Task LoadPrompts()
    {
        _isLoading = true;
        _errorMessage = null;

        try
        {
            _prompts = await PromptService.GetAllPromptsAsync();
        }
        catch (Exception ex)
        {
            _errorMessage = $"Failed to load prompts: {ex.Message}";
        }
        finally
        {
            _isLoading = false;
        }
    }

    private void ShowCreateDialog()
    {
        _isEditing = false;
        _editingPrompt = new SystemPromptDto
        {
            IsActive = true,
            IsDefault = false
        };

        // Reset form fields
        _formName = string.Empty;
        _formDescription = null;
        _formContent = string.Empty;
        _formIsActive = true;
        _formIsDefault = false;

        _showDialog = true;
        _errorMessage = null;
        _successMessage = null;
    }

    private void ShowEditDialog(SystemPromptDto prompt)
    {
        _isEditing = true;
        _editingPrompt = new SystemPromptDto
        {
            Id = prompt.Id,
            Name = prompt.Name,
            Description = prompt.Description,
            Content = prompt.Content,
            IsActive = prompt.IsActive,
            IsDefault = prompt.IsDefault
        };

        // Populate form fields
        _formName = prompt.Name;
        _formDescription = prompt.Description;
        _formContent = prompt.Content;
        _formIsActive = prompt.IsActive;
        _formIsDefault = prompt.IsDefault;

        _showDialog = true;
        _errorMessage = null;
        _successMessage = null;
    }

    private void CloseDialog()
    {
        _showDialog = false;
        _editingPrompt = new();
    }

    private async Task SavePrompt()
    {
        _isSaving = true;
        _errorMessage = null;
        _successMessage = null;

        try
        {
            // Copy form fields to the DTO
            _editingPrompt.Name = _formName;
            _editingPrompt.Description = _formDescription;
            _editingPrompt.Content = _formContent;
            _editingPrompt.IsActive = _formIsActive;
            _editingPrompt.IsDefault = _formIsDefault;

            if (_isEditing)
            {
                var (success, error) = await PromptService.UpdatePromptAsync(_editingPrompt);
                if (success)
                {
                    _successMessage = "Prompt updated successfully";
                    CloseDialog();
                    await LoadPrompts();
                }
                else
                {
                    _errorMessage = error ?? "Failed to update prompt";
                }
            }
            else
            {
                var (success, promptId, error) = await PromptService.CreatePromptAsync(_editingPrompt);
                if (success)
                {
                    _successMessage = "Prompt created successfully";
                    CloseDialog();
                    await LoadPrompts();
                }
                else
                {
                    _errorMessage = error ?? "Failed to create prompt";
                }
            }
        }
        catch (Exception ex)
        {
            _errorMessage = $"An error occurred: {ex.Message}";
        }
        finally
        {
            _isSaving = false;
        }
    }

    private async Task SetDefaultPrompt(int promptId)
    {
        _errorMessage = null;
        _successMessage = null;

        try
        {
            var (success, error) = await PromptService.SetDefaultPromptAsync(promptId);
            if (success)
            {
                _successMessage = "Default prompt updated";
                await LoadPrompts();
            }
            else
            {
                _errorMessage = error ?? "Failed to set default prompt";
            }
        }
        catch (Exception ex)
        {
            _errorMessage = $"Failed to set default: {ex.Message}";
        }
    }

    private async Task DeletePrompt(int promptId)
    {
        if (!await ConfirmDelete())
            return;

        _errorMessage = null;
        _successMessage = null;

        try
        {
            var (success, error) = await PromptService.DeletePromptAsync(promptId);
            if (success)
            {
                _successMessage = "Prompt deleted successfully";
                await LoadPrompts();
            }
            else
            {
                _errorMessage = error ?? "Failed to delete prompt";
            }
        }
        catch (Exception ex)
        {
            _errorMessage = $"Failed to delete prompt: {ex.Message}";
        }
    }

    private Task<bool> ConfirmDelete()
    {
        // Simple confirmation for now - could be enhanced with a proper dialog
        return Task.FromResult(true);
    }

    private string GetPromptCardClass(SystemPromptDto prompt)
    {
        var baseClass = "tb-panel p-4";
        if (prompt.IsDefault)
        {
            baseClass += " border-l-4 border-primary-500";
        }
        if (!prompt.IsActive)
        {
            baseClass += " opacity-60";
        }
        return baseClass;
    }
}
