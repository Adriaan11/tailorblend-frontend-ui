@inherits ComponentBase

@* TbTextField: Text input component with label, helper text, and validation styling *@
<div class="tb-form-group">
    @if (!string.IsNullOrEmpty(Label))
    {
        <label class="tb-form-label">@Label</label>
    }

    @if (Lines > 1)
    {
        <textarea
            class="@GetInputClass()"
            @bind="Value"
            @bind:event="oninput"
            placeholder="@Placeholder"
            rows="@Lines"
            @attributes="AdditionalAttributes"
            style="@Style">
        </textarea>
    }
    else
    {
        <input
            type="@InputType"
            class="@GetInputClass()"
            @bind="Value"
            @bind:event="oninput"
            placeholder="@Placeholder"
            @attributes="AdditionalAttributes"
            style="@Style" />
    }

    @if (!string.IsNullOrEmpty(HelperText))
    {
        <div class="tb-form-helper">@HelperText</div>
    }
</div>

@code {
    /// <summary>Label text for the input</summary>
    [Parameter]
    public string? Label { get; set; }

    /// <summary>Input value (two-way binding)</summary>
    [Parameter]
    public string? Value { get; set; }

    [Parameter]
    public EventCallback<string?> ValueChanged { get; set; }

    /// <summary>Helper text displayed below input</summary>
    [Parameter]
    public string? HelperText { get; set; }

    /// <summary>Placeholder text for empty input</summary>
    [Parameter]
    public string? Placeholder { get; set; }

    /// <summary>Input type: "text", "email", "password", "number", "date", etc.</summary>
    [Parameter]
    public string InputType { get; set; } = "text";

    /// <summary>Number of rows for textarea (>1 creates a textarea)</summary>
    [Parameter]
    public int Lines { get; set; } = 1;

    /// <summary>Is the input disabled?</summary>
    [Parameter]
    public bool Disabled { get; set; }

    /// <summary>Show error state</summary>
    [Parameter]
    public bool Error { get; set; }

    /// <summary>Error message to display</summary>
    [Parameter]
    public string? ErrorMessage { get; set; }

    /// <summary>Additional CSS classes</summary>
    [Parameter]
    public string Class { get; set; } = string.Empty;

    /// <summary>Inline styles</summary>
    [Parameter]
    public string? Style { get; set; }

    /// <summary>Additional HTML attributes</summary>
    [Parameter(CaptureUnmatchedValues = true)]
    public Dictionary<string, object>? AdditionalAttributes { get; set; }

    private string GetInputClass()
    {
        var baseClass = "tb-form-input";
        var disabledClass = Disabled ? "opacity-50 cursor-not-allowed" : "";
        var errorClass = Error ? "border-red-500 focus:ring-red-500" : "";

        return $"{baseClass} {disabledClass} {errorClass} {Class}";
    }
}
