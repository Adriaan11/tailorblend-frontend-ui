@inherits ComponentBase

@* TbButton: Styled button component with icon support *@
<button type="@ButtonType"
        class="@GetButtonClass()"
        disabled="@Disabled"
        @onclick="OnClick"
        @attributes="AdditionalAttributes">
    @if (!string.IsNullOrEmpty(StartIcon))
    {
        <TbIcon Icon="@StartIcon" Size="sm" Class="mr-2" />
    }
    @ChildContent
    @if (!string.IsNullOrEmpty(EndIcon))
    {
        <TbIcon Icon="@EndIcon" Size="sm" Class="ml-2" />
    }
</button>

@code {
    /// <summary>Button HTML type: "button", "submit", "reset"</summary>
    [Parameter]
    public string ButtonType { get; set; } = "button";

    /// <summary>Button variant: "filled", "outlined", "text"</summary>
    [Parameter]
    public string Variant { get; set; } = "filled";

    /// <summary>Button color: "primary", "secondary", "accent", "success", "error", "warning", "info"</summary>
    [Parameter]
    public string Color { get; set; } = "primary";

    /// <summary>Button size: "sm", "md", "lg"</summary>
    [Parameter]
    public string Size { get; set; } = "md";

    /// <summary>Disabled state</summary>
    [Parameter]
    public bool Disabled { get; set; }

    /// <summary>Icon to display before text</summary>
    [Parameter]
    public string StartIcon { get; set; } = string.Empty;

    /// <summary>Icon to display after text</summary>
    [Parameter]
    public string EndIcon { get; set; } = string.Empty;

    /// <summary>Additional CSS classes</summary>
    [Parameter]
    public string Class { get; set; } = string.Empty;

    /// <summary>Button content</summary>
    [Parameter]
    public RenderFragment? ChildContent { get; set; }

    /// <summary>Click event callback</summary>
    [Parameter]
    public EventCallback<MouseEventArgs> OnClick { get; set; }

    /// <summary>Additional HTML attributes</summary>
    [Parameter(CaptureUnmatchedValues = true)]
    public Dictionary<string, object>? AdditionalAttributes { get; set; }

    private string GetButtonClass()
    {
        var baseClass = "inline-flex items-center justify-center font-medium transition-colors rounded-lg focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-offset-white";

        var sizeClass = Size switch
        {
            "sm" => "px-3 py-1.5 text-sm",
            "md" => "px-4 py-2 text-base",
            "lg" => "px-6 py-3 text-lg",
            _ => "px-4 py-2 text-base"
        };

        var variantClass = (Variant, Color) switch
        {
            ("filled", "primary") => "bg-tb-accent text-white hover:opacity-90 focus:ring-tb-accent",
            ("filled", "secondary") => "bg-tb-indigo text-white hover:opacity-90 focus:ring-tb-indigo",
            ("filled", "accent") => "bg-gradient-to-r from-tb-accent to-tb-accent-strong text-white hover:shadow-lg focus:ring-tb-accent",
            ("filled", "success") => "bg-green-600 text-white hover:opacity-90 focus:ring-green-600",
            ("filled", "error") => "bg-red-600 text-white hover:opacity-90 focus:ring-red-600",
            ("filled", "warning") => "bg-amber-500 text-white hover:opacity-90 focus:ring-amber-500",
            ("filled", "info") => "bg-blue-600 text-white hover:opacity-90 focus:ring-blue-600",

            ("outlined", "primary") => "border-2 border-tb-accent text-tb-accent hover:bg-tb-accent/10 focus:ring-tb-accent",
            ("outlined", "secondary") => "border-2 border-tb-indigo text-tb-indigo hover:bg-tb-indigo/10 focus:ring-tb-indigo",
            ("outlined", "error") => "border-2 border-red-600 text-red-600 hover:bg-red-600/10 focus:ring-red-600",

            ("text", _) => $"text-{Color} hover:bg-{Color}/10 focus:ring-{Color}",

            _ => "bg-tb-accent text-white hover:opacity-90 focus:ring-tb-accent"
        };

        var disabledClass = Disabled ? "opacity-50 cursor-not-allowed" : "cursor-pointer";

        var darkModeClass = "[data-theme=dark]:focus:ring-offset-gray-900";

        return $"{baseClass} {sizeClass} {variantClass} {disabledClass} {darkModeClass} {Class}";
    }
}
