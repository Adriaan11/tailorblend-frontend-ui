@using BlazorConsultant.Models
@using Markdig
@implements IDisposable

<div class="tb-message @(Message.Role == "user" ? "tb-message--user" : "tb-message--assistant")">
    <!-- Message Header -->
    <div class="tb-message__header">
        <div style="display: flex; align-items: center; gap: var(--tb-space-8);">
            @if (Message.Role != "user")
            {
                <div style="width: 24px; height: 24px; border-radius: 50%; background: linear-gradient(135deg, var(--tb-accent), var(--tb-accent-strong)); display: flex; align-items: center; justify-content: center;">
                    <MudIcon Icon="@Icons.Material.Filled.LocalFlorist" Size="Size.Small" Style="color: white; font-size: 14px;" />
                </div>
            }
            <span style="font-weight: 600;">@(Message.Role == "user" ? "You" : "TailorBlend AI")</span>
        </div>
        <span title="@Message.Timestamp.ToString("yyyy-MM-dd HH:mm:ss")">@GetRelativeTime(Message.Timestamp)</span>
    </div>

    <!-- File Attachments -->
    @if (Message.Attachments != null && Message.Attachments.Count > 0)
    {
        <div style="margin-bottom: var(--tb-space-12);">
            <FilePreviewComponent Attachments="@Message.Attachments" ShowRemoveButton="false" />
        </div>
    }

    <!-- Message Content -->
    <div class="tb-message__content">
        @if (Message.Role == "assistant" && TypewriterEnabled && _isTyping)
        {
            @((MarkupString)_displayedHtml)
        }
        else
        {
            @((MarkupString)FormatMessage(Message.Content))
        }
    </div>

    <!-- Message Actions -->
    <div class="tb-message__actions">
        <button class="tb-message__action" title="Copy message" aria-label="Copy message" @onclick="CopyMessage">
            <MudIcon Icon="@Icons.Material.Filled.ContentCopy" Size="Size.Small" />
        </button>
        @if (Message.Role == "assistant")
        {
            <button class="tb-message__action" title="Regenerate response" aria-label="Regenerate response">
                <MudIcon Icon="@Icons.Material.Filled.Refresh" Size="Size.Small" />
            </button>
        }
    </div>
</div>

@inject IJSRuntime JS

@code {
    [Parameter]
    public ChatMessage Message { get; set; } = new();

    [Parameter]
    public bool TypewriterEnabled { get; set; } = true;

    // Static shared markdown pipeline (performance optimization)
    private static readonly MarkdownPipeline _sharedPipeline =
        new MarkdownPipelineBuilder().UseAdvancedExtensions().Build();

    // Cache fields
    private string? _lastContent;
    private string? _cachedHtml;

    // Typewriter state
    private bool _isTyping = false;
    private string _displayedHtml = "";
    private int _typewriterIndex = 0;
    private Timer? _typewriterTimer;
    private string _fullContentSnapshot = "";

    protected override bool ShouldRender()
    {
        if (_isTyping)
            return true;

        bool contentChanged = Message.Content != _lastContent;

        if (contentChanged)
        {
            _lastContent = Message.Content;
            return true;
        }

        return false;
    }

    protected override void OnParametersSet()
    {
        base.OnParametersSet();

        if (!TypewriterEnabled || Message.Role != "user")
        {
            if (!string.IsNullOrEmpty(Message.Content) &&
                Message.Content != _fullContentSnapshot)
            {
                _fullContentSnapshot = Message.Content;
                StartTypewriter();
            }
        }
    }

    private string GetRelativeTime(DateTime timestamp)
    {
        var diff = DateTime.Now - timestamp;

        if (diff.TotalSeconds < 30) return "Just now";
        if (diff.TotalMinutes < 1) return $"{(int)diff.TotalSeconds}s ago";
        if (diff.TotalMinutes < 60) return $"{(int)diff.TotalMinutes}m ago";
        if (diff.TotalHours < 24) return $"{(int)diff.TotalHours}h ago";

        return timestamp.ToString("MMM d, HH:mm");
    }

    private async Task CopyMessage()
    {
        try
        {
            await JS.InvokeVoidAsync("navigator.clipboard.writeText", Message.Content);
        }
        catch
        {
            // Silently handle copy failures
        }
    }

    private void StartTypewriter()
    {
        _typewriterTimer?.Dispose();

        _cachedHtml = Markdown.ToHtml(Message.Content, _sharedPipeline);
        _lastContent = Message.Content;

        _displayedHtml = "";
        _typewriterIndex = 0;
        _isTyping = true;

        _typewriterTimer = new Timer(_ =>
        {
            InvokeAsync(() =>
            {
                if (_typewriterIndex >= _cachedHtml.Length)
                {
                    _displayedHtml = _cachedHtml;
                    _isTyping = false;
                    _typewriterTimer?.Dispose();
                    StateHasChanged();
                    return;
                }

                _typewriterIndex += 2;
                _displayedHtml = _cachedHtml.Substring(0,
                    Math.Min(_typewriterIndex, _cachedHtml.Length));

                StateHasChanged();
            });
        }, null, 0, 15);
    }

    private string FormatMessage(string content)
    {
        if (string.IsNullOrWhiteSpace(content))
            return string.Empty;

        if (content == _lastContent && _cachedHtml != null)
            return _cachedHtml;

        _cachedHtml = Markdown.ToHtml(content, _sharedPipeline);
        _lastContent = content;

        return _cachedHtml;
    }

    public void Dispose()
    {
        _typewriterTimer?.Dispose();
    }
}
