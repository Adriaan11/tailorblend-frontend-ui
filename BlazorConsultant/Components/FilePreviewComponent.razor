@using BlazorConsultant.Models

@if (Attachments != null && Attachments.Count > 0)
{
    <div class="tb-attachments-preview">
        @foreach (var attachment in Attachments)
        {
            <div class="tb-attachment-item">
                <div class="tb-attachment-icon">
                    @if (attachment.IsImage)
                    {
                        <MudIcon Icon="@Icons.Material.Filled.Image" Color="Color.Success" />
                    }
                    else
                    {
                        @switch (attachment.Extension)
                        {
                            case "pdf":
                                <MudIcon Icon="@Icons.Material.Filled.PictureAsPdf" Color="Color.Error" />
                                break;
                            case "doc":
                            case "docx":
                                <MudIcon Icon="@Icons.Material.Filled.Description" Color="Color.Primary" />
                                break;
                            case "xls":
                            case "xlsx":
                                <MudIcon Icon="@Icons.Material.Filled.TableChart" Color="Color.Success" />
                                break;
                            case "txt":
                                <MudIcon Icon="@Icons.Material.Filled.TextFields" Color="Color.Default" />
                                break;
                            default:
                                <MudIcon Icon="@Icons.Material.Filled.AttachFile" Color="Color.Default" />
                                break;
                        }
                    }
                </div>
                <div class="tb-attachment-info">
                    <div class="tb-attachment-name">@attachment.FileName</div>
                    <div class="tb-attachment-size">@attachment.FormattedSize</div>
                </div>
                @if (ShowRemoveButton)
                {
                    <button class="tb-attachment-remove" @onclick="@(() => OnRemove(attachment))" aria-label="Remove attachment">
                        <MudIcon Icon="@Icons.Material.Filled.Close" Size="Size.Small" />
                    </button>
                }
            </div>
        }
    </div>
}

<style>
    .tb-attachments-preview {
        display: flex;
        flex-wrap: wrap;
        gap: 0.5rem;
        margin: 0.75rem 0;
    }

    .tb-attachment-item {
        display: flex;
        align-items: center;
        gap: 0.5rem;
        padding: 0.5rem 0.75rem;
        background: var(--tb-gray-75);
        border: 1px solid var(--tb-border);
        border-radius: var(--tb-radius);
        max-width: 250px;
        position: relative;
    }

    .tb-attachment-icon {
        display: flex;
        align-items: center;
        justify-content: center;
        flex-shrink: 0;
    }

    .tb-attachment-info {
        flex: 1;
        min-width: 0;
        overflow: hidden;
    }

    .tb-attachment-name {
        font-size: 0.875rem;
        font-weight: 500;
        color: var(--tb-gray-900);
        white-space: nowrap;
        overflow: hidden;
        text-overflow: ellipsis;
    }

    .tb-attachment-size {
        font-size: 0.75rem;
        color: var(--tb-gray-600);
    }

    .tb-attachment-remove {
        display: flex;
        align-items: center;
        justify-content: center;
        width: 20px;
        height: 20px;
        padding: 0;
        border: none;
        background: transparent;
        cursor: pointer;
        color: var(--tb-gray-600);
        transition: color 0.2s ease;
        flex-shrink: 0;
    }

    .tb-attachment-remove:hover {
        color: var(--mud-palette-error);
    }

    @media (max-width: 768px) {
        .tb-attachments-preview {
            flex-wrap: nowrap;
            overflow-x: auto;
            padding-bottom: 0.5rem;
            -webkit-overflow-scrolling: touch;
        }

        .tb-attachments-preview::-webkit-scrollbar {
            display: none;
        }

        .tb-attachment-item {
            flex: 0 0 220px;
        }
    }
</style>

@code {
    [Parameter]
    public List<FileAttachment> Attachments { get; set; } = new();

    [Parameter]
    public bool ShowRemoveButton { get; set; } = false;

    [Parameter]
    public EventCallback<FileAttachment> OnRemoveClick { get; set; }

    private async Task OnRemove(FileAttachment attachment)
    {
        if (OnRemoveClick.HasDelegate)
        {
            await OnRemoveClick.InvokeAsync(attachment);
        }
    }
}
