@inherits LayoutComponentBase
@inject ISessionService SessionService
@inject IJSRuntime JS

<MudThemeProvider />
<MudPopoverProvider />
<MudDialogProvider />
<MudSnackbarProvider />

<div class="tb-mobile-app">
    <!-- Desktop Sidebar (hidden on mobile) -->
    <aside class="tb-desktop-sidebar">
        <div class="tb-sidebar-brand">
            <div class="tb-mobile-nav__icon">
                <MudIcon Icon="@Icons.Material.Filled.LocalFlorist" />
            </div>
            <div>
                <div style="font-weight: 700; font-size: 1.125rem; color: var(--text-primary);">TailorBlend</div>
                <div class="tb-text-caption">AI Consultant</div>
            </div>
        </div>

        <nav class="tb-sidebar-nav">
            <a href="/" class="tb-sidebar-link @(GetActiveClass("/"))">
                <MudIcon Icon="@Icons.Material.Filled.Home" />
                <span>Overview</span>
            </a>
            <a href="/chat" class="tb-sidebar-link @(GetActiveClass("/chat"))">
                <MudIcon Icon="@Icons.Material.Filled.Chat" />
                <span>Consultation</span>
            </a>
            <a href="/practitioner-blend" class="tb-sidebar-link @(GetActiveClass("/practitioner-blend"))">
                <MudIcon Icon="@Icons.Material.Filled.MedicalServices" />
                <span>Practitioner</span>
            </a>
            <a href="/multi-agent-blend" class="tb-sidebar-link @(GetActiveClass("/multi-agent-blend"))">
                <MudIcon Icon="@Icons.Material.Filled.Psychology" />
                <span>Multi-Agent</span>
            </a>
            <a href="/configuration" class="tb-sidebar-link @(GetActiveClass("/configuration"))">
                <MudIcon Icon="@Icons.Material.Filled.Settings" />
                <span>Configuration</span>
            </a>
        </nav>

        <div style="margin-top: auto; padding-top: var(--tb-space-32);">
            <div class="tb-divider" style="margin-bottom: var(--tb-space-16);"></div>
            <button class="tb-icon-btn" style="width: 100%;" @onclick="ToggleTheme" title="Toggle theme">
                <MudIcon Icon="@(_isDarkMode ? Icons.Material.Filled.LightMode : Icons.Material.Filled.DarkMode)" />
                <span style="margin-left: var(--tb-space-8);">@(_isDarkMode ? "Light" : "Dark") Mode</span>
            </button>
        </div>
    </aside>

    <!-- Main Content Wrapper -->
    <div style="flex: 1; display: flex; flex-direction: column; min-width: 0;">
        <!-- Mobile Top Navigation -->
        <header class="tb-mobile-nav">
            <a href="/" class="tb-mobile-nav__logo">
                <div class="tb-mobile-nav__icon">
                    <MudIcon Icon="@Icons.Material.Filled.LocalFlorist" Size="Size.Medium" />
                </div>
                <span>TailorBlend</span>
            </a>

            <div class="tb-mobile-nav__actions">
                @if (!string.IsNullOrEmpty(SessionService?.SessionId))
                {
                    <div class="tb-badge">
                        <span class="tb-text-muted" style="font-size: 0.7rem; font-weight: 500;">SESSION</span>
                        @if (SessionService.MessageCount > 0)
                        {
                            <span style="background: var(--tb-accent); color: white; padding: 2px 8px; border-radius: 999px; font-weight: 700; font-size: 0.7rem;">
                                @SessionService.MessageCount
                            </span>
                        }
                    </div>
                }

                <button class="tb-icon-btn" @onclick="ToggleTheme" title="Toggle theme">
                    <MudIcon Icon="@(_isDarkMode ? Icons.Material.Filled.LightMode : Icons.Material.Filled.DarkMode)" />
                </button>
            </div>
        </header>

        <!-- Page Content -->
        <main class="tb-mobile-content">
            @Body
        </main>

        <!-- Mobile Bottom Navigation -->
        <nav class="tb-bottom-nav">
            <a href="/" class="tb-bottom-nav__item @(GetActiveClass("/"))">
                <MudIcon Icon="@Icons.Material.Filled.Home" Size="Size.Medium" />
                <span>Home</span>
            </a>
            <a href="/chat" class="tb-bottom-nav__item @(GetActiveClass("/chat"))">
                <MudIcon Icon="@Icons.Material.Filled.Chat" Size="Size.Medium" />
                <span>Chat</span>
            </a>
            <a href="/practitioner-blend" class="tb-bottom-nav__item @(GetActiveClass("/practitioner-blend"))">
                <MudIcon Icon="@Icons.Material.Filled.MedicalServices" Size="Size.Medium" />
                <span>Pro</span>
            </a>
            <a href="/multi-agent-blend" class="tb-bottom-nav__item @(GetActiveClass("/multi-agent-blend"))">
                <MudIcon Icon="@Icons.Material.Filled.Psychology" Size="Size.Medium" />
                <span>Multi</span>
            </a>
            <a href="/configuration" class="tb-bottom-nav__item @(GetActiveClass("/configuration"))">
                <MudIcon Icon="@Icons.Material.Filled.Settings" Size="Size.Medium" />
                <span>Settings</span>
            </a>
        </nav>
    </div>
</div>

@code {
    [Inject] private NavigationManager NavManager { get; set; } = default!;

    private bool _isDarkMode;
    private bool _themeInitialized;
    private string _currentPath = "";

    protected override void OnInitialized()
    {
        _currentPath = NavManager.ToBaseRelativePath(NavManager.Uri);
        NavManager.LocationChanged += OnLocationChanged;
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            try
            {
                var theme = await JS.InvokeAsync<string>("tbTheme.init");
                _isDarkMode = string.Equals(theme, "dark", StringComparison.OrdinalIgnoreCase);
            }
            catch
            {
                _isDarkMode = false;
            }
            finally
            {
                _themeInitialized = true;
                StateHasChanged();
            }
        }
    }

    private void OnLocationChanged(object? sender, LocationChangedEventArgs e)
    {
        _currentPath = NavManager.ToBaseRelativePath(e.Location);
        StateHasChanged();
    }

    private async Task ToggleTheme()
    {
        if (!_themeInitialized)
            return;

        _isDarkMode = !_isDarkMode;
        var theme = _isDarkMode ? "dark" : "light";
        try
        {
            await JS.InvokeVoidAsync("tbTheme.setTheme", theme);
        }
        catch
        {
            // Ignore if the theme script is not yet available
        }
    }

    private string GetActiveClass(string path)
    {
        // Normalize paths for comparison
        var normalizedPath = path.TrimEnd('/');
        var normalizedCurrentPath = _currentPath.TrimEnd('/');

        if (path == "/")
        {
            return normalizedCurrentPath == "" ? "active" : "";
        }

        return normalizedCurrentPath.StartsWith(normalizedPath, StringComparison.OrdinalIgnoreCase) ? "active" : "";
    }

    public void Dispose()
    {
        NavManager.LocationChanged -= OnLocationChanged;
    }
}
