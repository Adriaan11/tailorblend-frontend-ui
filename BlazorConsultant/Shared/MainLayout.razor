@using Microsoft.JSInterop
@inherits LayoutComponentBase
@inject ISessionService SessionService
@inject IJSRuntime JS

<div class="tb-mobile-app">
    <!-- Desktop Sidebar (hidden on mobile) -->
    <aside class="tb-desktop-sidebar">
        <div class="tb-sidebar-brand">
            <div class="tb-mobile-nav__icon">
                <TbIcon Icon="flower" />
            </div>
            <div>
                <div style="font-weight: 700; font-size: 1.125rem; color: var(--text-primary);">TailorBlend</div>
                <div class="tb-text-caption">AI Consultant</div>
            </div>
        </div>

        <nav class="tb-sidebar-nav">
            <a href="/" class="tb-sidebar-link @(GetActiveClass("/"))">
                <TbIcon Icon="home" />
                <span>Overview</span>
            </a>
            <a href="/chat" class="tb-sidebar-link @(GetActiveClass("/chat"))">
                <TbIcon Icon="comments" />
                <span>Consultation</span>
            </a>
            <a href="/practitioner-blend" class="tb-sidebar-link @(GetActiveClass("/practitioner-blend"))">
                <TbIcon Icon="stethoscope" />
                <span>Practitioner</span>
            </a>
            <a href="/multi-agent-blend" class="tb-sidebar-link @(GetActiveClass("/multi-agent-blend"))">
                <TbIcon Icon="brain" />
                <span>Multi-Agent</span>
            </a>
            <a href="/configuration" class="tb-sidebar-link @(GetActiveClass("/configuration"))">
                <TbIcon Icon="gear" />
                <span>Configuration</span>
            </a>
        </nav>

        <div style="margin-top: auto; padding-top: var(--tb-space-32);">
            <div class="tb-divider" style="margin-bottom: var(--tb-space-16);"></div>

            <!-- PWA Install Button (Desktop) -->
            @if (_showInstallButton)
            {
                <button id="pwa-install-button" class="tb-icon-btn" style="width: 100%; margin-bottom: var(--tb-space-8); background: linear-gradient(135deg, var(--tb-accent), #5bbfb5); color: white;" @onclick="PromptInstall" title="@(_isIOSDevice ? "Get installation instructions" : "Install app")">
                    <TbIcon Icon="download" Color="inherit" />
                    <span style="margin-left: var(--tb-space-8);">@(_isIOSDevice ? "Add to Home Screen" : "Install App")</span>
                </button>
            }

            <button class="tb-icon-btn" style="width: 100%;" @onclick="ToggleTheme" title="Toggle theme">
                <TbIcon Icon="@(_isDarkMode ? "sun" : "moon")" />
                <span style="margin-left: var(--tb-space-8);">@(_isDarkMode ? "Light" : "Dark") Mode</span>
            </button>
        </div>
    </aside>

    <!-- Main Content Wrapper -->
    <div style="flex: 1; display: flex; flex-direction: column; min-width: 0;">
        <!-- Mobile Top Navigation -->
        <header class="tb-mobile-nav">
            <a href="/" class="tb-mobile-nav__logo">
                <div class="tb-mobile-nav__icon">
                    <TbIcon Icon="flower" Size="lg" />
                </div>
                <span>TailorBlend</span>
            </a>

            <div class="tb-mobile-nav__actions">
                @if (!string.IsNullOrEmpty(SessionService?.SessionId))
                {
                    <div class="tb-badge">
                        <span class="tb-text-muted" style="font-size: 0.7rem; font-weight: 500;">SESSION</span>
                        @if (SessionService.MessageCount > 0)
                        {
                            <span style="background: var(--tb-accent); color: white; padding: 2px 8px; border-radius: 999px; font-weight: 700; font-size: 0.7rem;">
                                @SessionService.MessageCount
                            </span>
                        }
                    </div>
                }

                @if (_showInstallButton)
                {
                    <button class="tb-icon-btn" @onclick="PromptInstall" title="@(_isIOSDevice ? "Get installation instructions" : "Install app")" style="color: var(--tb-accent);">
                        <TbIcon Icon="download" Color="accent" />
                    </button>
                }

                <button class="tb-icon-btn" @onclick="ToggleTheme" title="Toggle theme">
                    <TbIcon Icon="@(_isDarkMode ? "sun" : "moon")" />
                </button>
            </div>
        </header>

        <!-- PWA Install Banner -->
        <TbInstallBanner OnInstallClicked="@(() => _showInstallButton = false)" />

        <!-- Page Content with Global Error Boundary -->
        <ErrorBoundary>
            <ChildContent>
                <main class="tb-mobile-content">
                    @Body
                </main>
            </ChildContent>
            <ErrorContent Context="errorContext">
                <div style="padding: 2rem; display: flex; flex-direction: column; max-width: 1200px; margin: 0 auto;">
                    <div style="text-align: center; margin-bottom: 2rem;">
                        <div style="font-size: 3rem; margin-bottom: 1rem;">⚠️</div>
                        <h2 style="color: var(--text-primary); margin-bottom: 0.5rem;">Unhandled Exception</h2>
                        <p style="color: var(--text-muted); margin-bottom: 1.5rem;">
                            An error occurred while rendering this component.
                        </p>
                    </div>

                    <!-- Exception Details -->
                    <div style="background: var(--bg-surface); border: 1px solid var(--tb-border); border-radius: 8px; padding: 1.5rem; margin-bottom: 1.5rem;">
                        <h3 style="color: var(--tb-error, #ef4444); margin: 0 0 1rem 0; font-size: 1rem; font-weight: 600;">
                            @errorContext.GetType().Name
                        </h3>
                        <p style="color: var(--text-primary); margin: 0 0 1rem 0; font-family: var(--tb-font-mono); font-size: 0.875rem;">
                            @errorContext.Message
                        </p>

                        @if (!string.IsNullOrEmpty(errorContext.StackTrace))
                        {
                            <details style="margin-top: 1rem;">
                                <summary style="cursor: pointer; color: var(--text-primary); font-weight: 600; margin-bottom: 0.5rem;">
                                    Stack Trace
                                </summary>
                                <pre style="background: var(--tb-gray-900); color: #f8f8f2; padding: 1rem; border-radius: 4px; overflow-x: auto; font-size: 0.75rem; line-height: 1.5; margin: 0;">@errorContext.StackTrace</pre>
                            </details>
                        }

                        @if (errorContext.InnerException != null)
                        {
                            <details style="margin-top: 1rem;">
                                <summary style="cursor: pointer; color: var(--text-primary); font-weight: 600; margin-bottom: 0.5rem;">
                                    Inner Exception
                                </summary>
                                <div style="background: var(--tb-gray-50); padding: 1rem; border-radius: 4px; margin-top: 0.5rem;">
                                    <p style="color: var(--tb-error, #ef4444); font-weight: 600; margin: 0 0 0.5rem 0;">
                                        @errorContext.InnerException.GetType().Name
                                    </p>
                                    <p style="color: var(--text-primary); margin: 0; font-family: var(--tb-font-mono); font-size: 0.875rem;">
                                        @errorContext.InnerException.Message
                                    </p>
                                    @if (!string.IsNullOrEmpty(errorContext.InnerException.StackTrace))
                                    {
                                        <pre style="background: var(--tb-gray-900); color: #f8f8f2; padding: 1rem; border-radius: 4px; overflow-x: auto; font-size: 0.75rem; line-height: 1.5; margin: 0.5rem 0 0 0;">@errorContext.InnerException.StackTrace</pre>
                                    }
                                </div>
                            </details>
                        }
                    </div>

                    <!-- Action Buttons -->
                    <div style="display: flex; gap: 1rem; flex-wrap: wrap; justify-content: center;">
                        <TbButton Variant="filled" Color="primary" @onclick="@(() => NavManager.NavigateTo("/"))">
                            <TbIcon Icon="home" />
                            <span>Go Home</span>
                        </TbButton>
                        <TbButton Variant="outlined" Color="primary" @onclick="@(() => NavManager.NavigateTo(NavManager.Uri, true))">
                            <TbIcon Icon="refresh" />
                            <span>Refresh Page</span>
                        </TbButton>
                    </div>
                </div>
            </ErrorContent>
        </ErrorBoundary>

        <!-- Mobile Bottom Navigation -->
        <nav class="tb-bottom-nav">
            <a href="/" class="tb-bottom-nav__item @(GetActiveClass("/"))">
                <TbIcon Icon="home" Size="lg" />
                <span>Home</span>
            </a>
            <a href="/chat" class="tb-bottom-nav__item @(GetActiveClass("/chat"))">
                <TbIcon Icon="comments" Size="lg" />
                <span>Chat</span>
            </a>
            <a href="/practitioner-blend" class="tb-bottom-nav__item @(GetActiveClass("/practitioner-blend"))">
                <TbIcon Icon="stethoscope" Size="lg" />
                <span>Pro</span>
            </a>
            <a href="/multi-agent-blend" class="tb-bottom-nav__item @(GetActiveClass("/multi-agent-blend"))">
                <TbIcon Icon="brain" Size="lg" />
                <span>Multi</span>
            </a>
            <a href="/configuration" class="tb-bottom-nav__item @(GetActiveClass("/configuration"))">
                <TbIcon Icon="gear" Size="lg" />
                <span>Settings</span>
            </a>
        </nav>
    </div>
</div>

@code {
    [Inject] private NavigationManager NavManager { get; set; } = default!;
    [Inject] private ILogger<MainLayout> Logger { get; set; } = default!;

    private bool _isDarkMode;
    private bool _themeInitialized;
    private bool _showInstallButton;
    private bool _isIOSDevice;
    private string _currentPath = "";

    protected override void OnInitialized()
    {
        _currentPath = NavManager.ToBaseRelativePath(NavManager.Uri);
        NavManager.LocationChanged += OnLocationChanged;
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            try
            {
                var theme = await JS.InvokeAsync<string>("tbTheme.init");
                _isDarkMode = string.Equals(theme, "dark", StringComparison.OrdinalIgnoreCase);
            }
            catch
            {
                _isDarkMode = false;
            }
            finally
            {
                _themeInitialized = true;
                StateHasChanged();
            }

            // Check if PWA install is available
            await CheckInstallAvailability();
        }
    }

    private async Task CheckInstallAvailability()
    {
        try
        {
            Logger.LogInformation("[MainLayout] Checking PWA install availability");

            // Retry if pwaInstall is not yet available
            int maxRetries = 5;
            bool pwaAvailable = false;

            for (int i = 0; i < maxRetries; i++)
            {
                try
                {
                    var isInstallable = await JS.InvokeAsync<bool>("pwaInstall.isInstallable");
                    Logger.LogInformation($"[MainLayout] pwaInstall.isInstallable() returned: {isInstallable}");
                    _showInstallButton = isInstallable;
                    pwaAvailable = true;
                    break;
                }
                catch (JSDisconnectedException)
                {
                    throw; // JS connection lost, don't retry
                }
                catch (Exception ex) when (i < maxRetries - 1)
                {
                    Logger.LogWarning($"[MainLayout] PWA script not ready (attempt {i + 1}/{maxRetries}): {ex.Message}");
                    await Task.Delay(100); // Wait 100ms and retry
                }
            }

            if (!pwaAvailable)
            {
                Logger.LogWarning("[MainLayout] PWA script never became available");
                _showInstallButton = false;
            }

            // Check if device is iOS
            try
            {
                _isIOSDevice = await JS.InvokeAsync<bool>("pwaInstall.isIOS");
                Logger.LogInformation($"[MainLayout] pwaInstall.isIOS() returned: {_isIOSDevice}");
            }
            catch (Exception ex)
            {
                Logger.LogWarning($"[MainLayout] Failed to check iOS: {ex.Message}");
                _isIOSDevice = false;
            }

            StateHasChanged();
            Logger.LogInformation($"[MainLayout] StateHasChanged called, _showInstallButton={_showInstallButton}");

            // After rendering the button, ensure visibility is updated
            if (_showInstallButton)
            {
                await Task.Delay(50); // Wait for DOM to update
                try
                {
                    await JS.InvokeVoidAsync("pwaInstall.updateButton");
                    Logger.LogInformation("[MainLayout] Called pwaInstall.updateButton()");
                }
                catch (Exception ex)
                {
                    Logger.LogWarning($"[MainLayout] Failed to call updateButton: {ex.Message}");
                }
            }
        }
        catch (Exception ex)
        {
            Logger.LogError($"[MainLayout] PWA install check failed: {ex.Message}");
            _showInstallButton = false;
        }
    }

    private void OnLocationChanged(object? sender, LocationChangedEventArgs e)
    {
        _currentPath = NavManager.ToBaseRelativePath(e.Location);
        StateHasChanged();
    }

    private async Task PromptInstall()
    {
        try
        {
            var result = await JS.InvokeAsync<InstallResult>("pwaInstall.showPrompt");

            if (result.Success)
            {
                if (result.Installed)
                {
                    // User accepted installation
                    _showInstallButton = false;
                    StateHasChanged();
                }
                // If not installed, user dismissed the prompt - button stays visible
            }
            else
            {
                // Error occurred or prompt not available
                Console.WriteLine($"[PWA] Install error: {result.Error}");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"[PWA] Install exception: {ex.Message}");
        }
    }

    private async Task ToggleTheme()
    {
        if (!_themeInitialized)
            return;

        _isDarkMode = !_isDarkMode;
        var theme = _isDarkMode ? "dark" : "light";
        try
        {
            await JS.InvokeVoidAsync("tbTheme.setTheme", theme);
        }
        catch
        {
            // Ignore if the theme script is not yet available
        }
    }

    // Model for PWA install result
    private class InstallResult
    {
        public bool Success { get; set; }
        public bool Installed { get; set; }
        public string? Error { get; set; }
    }

    private string GetActiveClass(string path)
    {
        // Normalize paths for comparison
        var normalizedPath = path.TrimEnd('/');
        var normalizedCurrentPath = _currentPath.TrimEnd('/');

        if (path == "/")
        {
            return normalizedCurrentPath == "" ? "active" : "";
        }

        return normalizedCurrentPath.StartsWith(normalizedPath, StringComparison.OrdinalIgnoreCase) ? "active" : "";
    }

    public void Dispose()
    {
        NavManager.LocationChanged -= OnLocationChanged;
    }
}
